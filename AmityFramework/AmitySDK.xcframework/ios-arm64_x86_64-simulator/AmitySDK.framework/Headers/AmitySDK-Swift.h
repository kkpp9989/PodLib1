#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef AMITYSDK_SWIFT_H
#define AMITYSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import Realm;
#endif

#import <AmitySDK/AmitySDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmitySDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Internal class to represent sdk error. Do not use this class directly.
SWIFT_CLASS("_TtC8AmitySDK8ASCError")
@interface ASCError : NSObject
/// Returns an instance of NSError with domain, code and userInfo constructed from response
@property (nonatomic, readonly) NSError * _Nonnull error;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message code:(AmityErrorCode)code OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message errorCode:(NSInteger)code OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EkoNetworkRequest;
@class ASCNetworkRequestToken;

SWIFT_CLASS("_TtC8AmitySDK21ASCNetworkCoordinator")
@interface ASCNetworkCoordinator : NSObject
/// Creates a retryable request and adds it to the queue. Request is
/// retried incase of specific failure & as long as the ASCNetworkRequestToken is retained.
/// Note: Requests made through live object or live collection are always
/// retryable requests.
- (ASCNetworkRequestToken * _Nonnull)beginRetryableRequest:(EkoNetworkRequest * _Nonnull)request completion:(void (^ _Nonnull)(EkoNetworkRequest * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Creates a request & execute it immediately. Request is not retried.
- (void)beginRequest:(EkoNetworkRequest * _Nonnull)request completion:(void (^ _Nullable)(EkoNetworkRequest * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Binds event with socket connection.
- (void)bind:(NSString * _Nonnull)event withResponder:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))withResponder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8AmitySDK22ASCNetworkRequestToken")
@interface ASCNetworkRequestToken : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AmitySDK8ASCUtils")
@interface ASCUtils : NSObject
+ (NSString * _Nonnull)convertArrayToString:(NSArray<NSString *> * _Nonnull)array withSeparator:(NSString * _Nonnull)separator SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)convertStringToArrayWithString:(NSString * _Nonnull)string withSeparator:(NSString * _Nonnull)separator SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)valueForFeedType:(AmityFeedType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocols used for builder used in sdk. Use one of the concrete classes instead.
SWIFT_PROTOCOL("_TtP8AmitySDK12AmityBuilder_")
@protocol AmityBuilder <NSObject>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// Builder protocol for Channel
SWIFT_PROTOCOL("_TtP8AmitySDK27AmityChannelBuilderProtocol_")
@protocol AmityChannelBuilderProtocol <AmityBuilder>
@property (nonatomic) AmityChannelType channelType;
@end


/// The builder class for channel membership filter.
SWIFT_CLASS("_TtC8AmitySDK35AmityChannelMembershipFilterBuilder")
@interface AmityChannelMembershipFilterBuilder : NSObject
/// Adds <code>AmityChannelMembershipSearchFilter</code> type to the builder.
/// If there is no value added by default builder will take value <code>AmityChannelMembershipSearchFilterMember</code>.
- (void)addWithFilter:(AmityChannelMembershipSearchFilter)filter;
/// Returns string description for particular filter option.
- (NSString * _Nonnull)getStringValueForFilter:(AmityChannelMembershipSearchFilter)filter SWIFT_WARN_UNUSED_RESULT;
/// Converts provided value to <code>AmityChannelMembershipSearchFilter</code> enum.
/// \param value String value for filter
///
///
/// returns:
/// returns <code>AmityChannelMembershipSearchFilter</code> case if value matches. Else returns <code>.member</code>
- (AmityChannelMembershipSearchFilter)getFilterForString:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Returns array of filters added.
- (NSArray<NSString *> * _Nonnull)getAllFilters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AmityClient;

/// Class for moderating channels. It contains interface for actions such as banning members, muting members etc.
SWIFT_CLASS("_TtC8AmitySDK22AmityChannelModeration")
@interface AmityChannelModeration : NSObject
/// Initializes Channel Moderation class.
/// \param client Valid <code>AmityClient</code> instance
///
/// \param channel Id of the channel
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andChannel:(NSString * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
/// Mute users in channel
/// \param userIds Id of users to mute
///
/// \param mutePeriodInSeconds Time duration to mute (in seconds)
///
/// \param completion Block to be executed when request is completed.
///
- (void)muteMembers:(NSArray<NSString *> * _Nonnull)userIds mutePeriod:(NSUInteger)mutePeriodInSeconds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unmute users in channel
/// \param userIds Id of users to unmute
///
/// \param completion Block to be executed when request is completed
///
- (void)unmuteMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Ban Members from channel
/// \param userIds Id of users to ban
///
/// \param completion Block to be executed when request is completed
///
- (void)banMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// UnBan users from channel
/// \param userIds If of users to unban
///
/// \param completion Block to be executed when request is completed
///
- (void)unbanMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Assign role to user
/// \param role Role to be assigned
///
/// \param userIds Id of users to whom role is to be assigned
///
/// \param completion Block to be executed when request is completed
///
- (void)addRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Remove assigned roles from user
/// \param role Role to be un-assigned
///
/// \param userIds Id of users from whom role is to be un-assigned
///
/// \param completion Block to be executed when request is completed
///
- (void)removeRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Notification settings for channel.
SWIFT_CLASS("_TtC8AmitySDK32AmityChannelNotificationSettings")
@interface AmityChannelNotificationSettings : NSObject
/// If notifications is enabled for the channel
@property (nonatomic) BOOL isEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for managing notifications related to channel.
SWIFT_CLASS("_TtC8AmitySDK32AmityChannelNotificationsManager")
@interface AmityChannelNotificationsManager : NSObject
/// Initializes Notification Manager class
/// \param client Valid <code>AmityClient</code> instance
///
/// \param channelId Id of the channel.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client channelId:(NSString * _Nonnull)channelId OBJC_DESIGNATED_INITIALIZER;
/// Enables the channel level push notification setting.
/// This setting will take effect on every device used by the user.
/// \param completion A block executed when the request has completed.
///
- (void)enableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Disables the channel level push notification setting.
/// This setting will take effect on every device used by the user.
/// \param completion A block executed when the request has completed.
///
- (void)disableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Retrieve the current channel level push notification state.
/// This setting is per user, not per device.
/// \param completion A block executed when the request has completed.
///
- (void)getSettingsWithCompletion:(void (^ _Nonnull)(AmityChannelNotificationSettings * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityChannelMember;

/// Class providing interface for managing participants of channels such as adding members, removing members, querying members etc.
SWIFT_CLASS("_TtC8AmitySDK25AmityChannelParticipation")
@interface AmityChannelParticipation : NSObject
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
@property (nonatomic, readonly, copy) NSString * _Nonnull channelId;
/// Initailizes Channel Participation class
/// \param client Valid <code>AmityClient</code> instance
///
/// \param channel Id of the channel
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andChannel:(NSString * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
/// Adds user to the channel
/// \param userIds Id of users to add
///
/// \param completion Block to be executed when request is completed.
///
- (void)addMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes user from channel
/// \param userIds Id of users to remove
///
/// \param completion Block to be executed when request is completed.
///
- (void)removeMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Let the server know that the user is currently viewing this channel (this automatically updates the user’s readToSegment and lastMentionedSegmentt)
/// A user can read multiple channels at the same time.
- (void)startReading;
/// Let the server know that the user has stopped reading this channel (this automatically updates the user’s readToSegment and lastMentionedSegment)
- (void)stopReading;
/// Get members for this channel filtered by provided parameter.
/// \param filter Option to filter channel members
///
/// \param sortBy Sort option for member list
///
/// \param roles Filter member list by roles. If you don’t want to filter by role, pass empty array
///
///
/// returns:
/// Live collection of <code>AmityChannelMember</code> object
- (AmityCollection<AmityChannelMember *> * _Nonnull)getMembersWithFilter:(AmityChannelMembershipFilter)filter sortBy:(AmitySortBy)sortBy roles:(NSArray<NSString *> * _Nonnull)roles SWIFT_WARN_UNUSED_RESULT;
/// Search for member in this channel
/// \param displayName Display Name as a search keyword
///
/// \param filterBuilder Builder class to create filter options
///
/// \param roles Filter membership list by roles. If you don’t want to filter by role, pass empty array
///
///
/// returns:
/// Live Collection of <code>AmityChannelMember</code> object
- (AmityCollection<AmityChannelMember *> * _Nonnull)searchMembersWithDisplayName:(NSString * _Nonnull)displayName filterBuilder:(AmityChannelMembershipFilterBuilder * _Nonnull)filterBuilder roles:(NSArray<NSString *> * _Nonnull)roles SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Builder class for constructing parameters for channel query
SWIFT_CLASS("_TtC8AmitySDK17AmityChannelQuery")
@interface AmityChannelQuery : NSObject
/// Channel types to query
/// All the channel types can be found at <code>AmityChannelQueryType</code> class. For example,
/// @code
/// let query = AmityChannelQuery()
/// query.types = [AmityChannelQueryType.community, AmityChannelQueryType.live]
/// @endcode
/// The default value is an empty set, meaning that the query will include all channel types..
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull types;
/// Filtering by member status
/// The default value is <code>.all</code>.
@property (nonatomic) AmityChannelQueryFilter filter;
/// Filter channels that contain all the <code>includingTags</code> tags in itself.
/// Specify an empty arary to ignore this filter.
/// The default value is an empty array.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull includingTags;
/// Filter channels that do not contain all the <code>excludingTags</code> in itself.
/// Specify an empty arary to ignore this filter.
/// The default value is an empty array.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull excludingTags;
/// Whether or not the query should return deleted channels.
/// Specify <code>true</code> to include deleted channels, <code>false</code> to not include deleted channels.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL includeDeleted;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Types of channel which can be queried
SWIFT_CLASS("_TtC8AmitySDK21AmityChannelQueryType")
@interface AmityChannelQueryType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull standard;)
+ (NSString * _Nonnull)standard SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy, getter=private) NSString * _Nonnull private_;)
+ (NSString * _Nonnull)private SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull broadcast;)
+ (NSString * _Nonnull)broadcast SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull conversation;)
+ (NSString * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull live;)
+ (NSString * _Nonnull)live SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull community;)
+ (NSString * _Nonnull)community SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityChannel;
@class AmityChannelUpdateBuilder;

/// Repository class for Channel. This class provides interface for creating, updating, joining, querying channels etc.
SWIFT_CLASS("_TtC8AmitySDK22AmityChannelRepository")
@interface AmityChannelRepository : NSObject
/// Valid client instance
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Total number of messages unread by user for this channel. Do not set this property directly.
@property (nonatomic) NSUInteger totalUnreadCount;
/// Initializes AmityChannelRepository class.
/// \param client Valid <code>AmityClient</code> instance.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Returns channel notification management object.
/// \param channelId Id of the channel
///
///
/// returns:
/// Returns instance of <code>AmityChannelNotificationsManager</code>
- (AmityChannelNotificationsManager * _Nonnull)notificationManagerForChannelWithId:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
/// Leaves current channel.
/// You cannot leave a conversation channel. Doing so would throw error.
/// \param channelId Id of the channel to leave
///
/// \param completion Block to be executed when request is completed.
///
- (void)leaveChannel:(NSString * _Nonnull)channelId withCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use `func leaveChannel(channelId:) async throws -> Void` instead.");
/// Creates a new channel. <em>Standard & Private</em> channel types has been depreciated. Please refer to our documentation for more info
/// \param builder Builder classes for channel. Each channnel types has its own builder class. Example: <code>AmityLiveChannelBuilder</code>
///
///
/// returns:
/// Returns live object for <code>AmityChannel</code> object
- (AmityObject<AmityChannel *> * _Nonnull)createChannelWith:(id <AmityChannelBuilderProtocol> _Nonnull)builder SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func createChannel(with:) async throws -> Void` instead.");
/// Updates existing channel.
/// \param builder Builder class for channel update.
///
///
/// returns:
/// Returns live object for <code>AmityChannel</code> object.
- (AmityObject<AmityChannel *> * _Nonnull)updateChannelWith:(AmityChannelUpdateBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func updateChannel(with:) async throws -> Void` instead.");
/// Join a channel with given id. If you have previously joined this channel and you are currently member of this channel, then this method will fetch existing channel.
/// note:
/// Starting from SDK version 3.0, If channel does not exists, this method will not create a new channel. You don’t need to join a conversation channel. Doing so would throw error.
/// \param channelId Valid id of channel
///
///
/// returns:
/// Live object for <code>AmityChannel</code> object
- (AmityObject<AmityChannel *> * _Nonnull)joinChannel:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func joinChannel(channelId:) async throws -> Void` instead.");
/// Returns exsiting channel with given id.
/// \param channelId Valid if of channel.
///
///
/// returns:
/// Live object for <code>AmityChannel</code> object
- (AmityObject<AmityChannel *> * _Nonnull)getChannel:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
/// Get list of channels with provided query options
/// \param query Query Options for fetching channels
///
///
/// returns:
/// Live Collection of <code>AmityChannel</code> object
- (AmityCollection<AmityChannel *> * _Nonnull)getChannelsWith:(AmityChannelQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AmityChannelRepository (SWIFT_EXTENSION(AmitySDK))
/// Join a channel with given ID. If you have previously joined this channel and you are currently member of this channel, then this method will return existing channel.
/// note:
/// Starting from SDK version 3.0, If channel does not exists, this method will not create a new channel. You don’t need to join a conversation channel. Doing so would throw error.
/// \param channelId Valid channel id.
///
///
/// returns:
/// Joined channel if successful. Else throws error
- (void)joinChannelWithChannelId:(NSString * _Nonnull)channelId completionHandler:(void (^ _Nonnull)(AmityChannel * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
/// Creates a new channel. Please refer to our documentation for more info
/// \param builder Builder classes for channel. Each channnel types has its own builder class. Example: <code>AmityLiveChannelBuilder</code>
///
///
/// returns:
/// Returns newly created channel if successful. Else returns false.
- (void)createChannelWith:(id <AmityChannelBuilderProtocol> _Nonnull)builder completionHandler:(void (^ _Nonnull)(AmityChannel * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
/// Updates the channel. Use AmityChannelUpdateBuilder class to create your update.
/// \param builder Builder for constructing channel updates.
///
///
/// returns:
/// Returns AmityChannel if update is successful. Else throws error
- (void)updateChannelWith:(AmityChannelUpdateBuilder * _Nonnull)builder completionHandler:(void (^ _Nonnull)(AmityChannel * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
/// Leaves channel with provided Id. Leaving a channel would change your membership status to none
/// You cannot leave a conversation channel. Doing so would throw error.
/// \param channelId Id of the channel
///
///
/// returns:
/// Returns Void. Throws incase of error.
- (void)leaveChannelWithChannelId:(NSString * _Nonnull)channelId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
@end


@class AmityImageData;

/// Builder to update the channel. All methods are optional.
SWIFT_CLASS("_TtC8AmitySDK25AmityChannelUpdateBuilder")
@interface AmityChannelUpdateBuilder : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
/// Default initializer.
- (nonnull instancetype)initWithChannelId:(NSString * _Nonnull)channelId OBJC_DESIGNATED_INITIALIZER;
/// Sets display name for channel. Default value is nil.
- (void)setDisplayName:(NSString * _Nonnull)displayName;
/// Sets medata for the channel. Default is empty dictionary.
- (void)setMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
/// Sets avatar info for this channel. Use AmityFileRepository to upload image and set the AmityImageData
/// instance that you get in response over here. To remove the avatar, pass nil.
- (void)setAvatar:(AmityImageData * _Nullable)avatarData;
/// Sets tags for channel. Default is empty array
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ObserverManager;
@class RLMRealm;
@protocol AmityClientDelegate;
@protocol AmityClientErrorDelegate;
enum AmityConnectionStatus : NSInteger;
@class AmityUser;
@class AmityUserNotificationsManager;
@class AmityMentionConfigurations;
enum AmityRegion : NSInteger;
@class AmityEndpoint;
@class AmityUserUpdateBuilder;

/// Entry class for sdk. <code>AmityClient</code> instance initializes sdk and is needed for further interaction with the sdk.
/// Though multiple instance of <code>AmityClient</code> can be created, we don’t recommend it. A single valid instance of <code>AmityClient</code> should be create and retained as long as you want to interact with sdk.
SWIFT_CLASS("_TtC8AmitySDK11AmityClient")
@interface AmityClient : NSObject
@property (nonatomic, readonly, strong) ObserverManager * _Nonnull observerManager;
@property (nonatomic, strong) ASCNetworkCoordinator * _Nonnull coordinator;
@property (nonatomic, readonly, strong) RLMRealm * _Nonnull dataRealm;
/// You can implement this delegate to listen to various sdk events
/// such as bad session, global ban, connection status changes etc.
@property (nonatomic, weak) id <AmityClientDelegate> _Nullable delegate;
@property (nonatomic, weak) id <AmityClientErrorDelegate> _Nullable clientErrorDelegate SWIFT_DEPRECATED_MSG("This property will be removed in the future. Please use `delegate` property instead.");
/// Current connection status for SDK. This property supports KVO currently but we recommend to use <code>didChangeConnectionStatus:</code> method from <code>AmityClientDelegate</code>. KVO observation for this property will be removed in future.
@property (nonatomic) enum AmityConnectionStatus connectionStatus SWIFT_DEPRECATED_MSG("This property will be removed in the future.");
/// Id of the current user.
@property (nonatomic, readonly, copy) NSString * _Nullable currentUserId;
/// Current User live object
@property (nonatomic, readonly, strong) AmityObject<AmityUser *> * _Nullable currentUser;
/// User level notification management object
@property (nonatomic, strong) AmityUserNotificationsManager * _Nonnull notificationManager;
/// This object contains configuration related to mention in chat
@property (nonatomic, readonly, strong) AmityMentionConfigurations * _Nullable mentionConfigurations;
/// Creates an instance of <code>AmityClient</code> with provided API key. By default, this method uses .global region configuration
/// \param apiKey ApiKey provided by Amity
///
/// \param region The region to which this sdk connects to.
///
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey region:(enum AmityRegion)region error:(NSError * _Nullable * _Nullable)error;
/// Creates an instance of <code>AmityClient</code> with provided API Key.
/// Use this method only if you need extra configuration.
/// If you don’t need extra configuration use <code>init(apiKey:_, region:_)</code> method instead.
/// \param apiKey ApiKey provided by Amity
///
/// \param endpoint mityEndpoint instance which provides configuration for various url
///
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey endpoint:(AmityEndpoint * _Nonnull)endpoint error:(NSError * _Nullable * _Nullable)error;
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey httpUrl:(NSString * _Nonnull)httpUrl socketUrl:(NSString * _Nonnull)socketUrl error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("This method will be removed in future. Please use `init(apiKey:_, region:_)` or `init(apiKey:_, endpoint:_)` instead");
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey url:(NSString * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("This method will be removed in future. Please use `init(apiKey:_, region:_)` or `init(apiKey:_, endpoint:_)` instead");
/// Connect the SDK to the server, and activate the current session with <code>userId</code>. The system will create a new user, if <code>userId</code> does not exist.
/// AmitySDK supports one user session at a time. If <code>userId</code> is different than the current session, the SDK automatically logout the current session before starting the new one. To properly logout, please use the counterpart <code>client.logout()</code>.
/// The SDK  provides local caches that are bound to the session. When the session is destroyed, the SDK also purge all local caches
/// If display name is nil, then user id would be set as display name. You can update it later using <code>updateUser:</code> method.
/// Error occurred in this method will not be delivered through <code>clientErrorDelegate</code>. Please observe it using completion handler instead.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: Id of the user
///   </li>
///   <li>
///     displayName: Display name of the user. If display name is nil or empty, user id would be used as display name.
///   </li>
///   <li>
///     authToken: Extra authentication token to be used for secure device registration. This is optional. Please refer to our Authentication documentation for further details.
///   </li>
///   <li>
///     completion: Completion handler to be called when device registration is successful or failed.
///   </li>
/// </ul>
- (void)loginWithUserId:(NSString * _Nonnull)userId displayName:(NSString * _Nullable)displayName authToken:(NSString * _Nullable)authToken completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("This login (+completion) will be removed in the future, please use [login(...) async throws] instead.");
/// Disconnect from the server without logging out the user.
/// This function does not destroy the current user session. The SDK connection can be resumed, by calling <code>.login(...)</code> with the current userId.
- (void)disconnect;
/// Disconnect from the server, and destroys the current user session. The SDK will delete all the local caches. Once this method is called, the only way to re-establish connection is to call <code>login</code> method again.
/// <ul>
///   <li>
///     The SDK will disconnect from the server immediately, the operation happens synchronously on the client side.
///   </li>
///   <li>
///     The SDK will unregister push notifications of this device.
///   </li>
/// </ul>
- (void)logout;
- (void)ekoAsyncBackgroundRealmTransaction:(void (^ _Nonnull)(RLMRealm * _Nonnull))block;
/// Register the current device (and the current logged-in user) to receive
/// push notifications.
/// You can call this method as many times as you’d like: the last call
/// will always override any precedent state.
/// As long as you call this function with a valid token, and after succesfully
/// registering the SDK, you’re guaranteed to receive only push notifications related
/// to the current logged in user.
/// Succesfully calling this method will override any precedent state: if this device
/// was previously registered with a different user, the device will no more get any
/// notification related to that user.
/// Call <code>unregisterDeviceForPushNotificationForUserId:completion:</code> to stop receiving
/// notifications for this user.
/// warning:
/// Once succesfully registered, this app will continue to receive
/// notifications related to this user until the <code>unregisterDeviceForPushWithCompletion:</code>
/// or another registration is made.
/// \param token A globally unique token that identifies this device to Apple
/// Push Notification service
///
/// \param completion A block executed when the request has successfully completed.
///
- (void)registerDeviceForPushNotificationWithDeviceToken:(NSString * _Nonnull)token completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unregister the current device to stop receiving any push notifications
/// related to the given user userId. If no user is passed, the backend will remove
/// any push notification token associated with this device.
/// Call this method when you no longer wish to receive notifications for
/// the previously registered user (for example when the user logs out).
/// warning:
/// Make sure that the completion block is called with success state, otherwise
/// the Amity backend will keep sending push notifications related to the previous user.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: The userId of the user of which the SDK should no longer receive notifications.
///   </li>
///   <li>
///     completion: A block executed when the request has successfully completed.
///   </li>
/// </ul>
- (void)unregisterDeviceForPushNotificationForUserId:(NSString * _Nullable)userId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (void)updateUser:(AmityUserUpdateBuilder * _Nonnull)builder completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (NSDictionary<NSString *, id> * _Nullable)sendCustomCommandWithCommand:(NSString * _Nonnull)command SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface AmityClient (SWIFT_EXTENSION(AmitySDK))
/// Checks whether the current user has permission or not.
/// \param permission Permission to check
///
/// \param completion Completion handler with boolean which returns True if permission is granted else returns False
///
- (void)hasPermission:(AmityPermission)permission completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks whether the current user has permission inside particular channel. This method checks for permission in global level as well as channel level.
/// \param permission Permission to check
///
/// \param channelId Id of the channel to check for
///
/// \param completion Completion handler with boolean which returns True if permission is granted else returns False
///
- (void)hasPermission:(AmityPermission)permission forChannel:(NSString * _Nonnull)channelId completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks whether the current user has permission inside particular channel. This method checks for permission in global level as well as channel level.
/// \param permission Permission to check
///
/// \param communityId Id of the community to check for
///
/// \param completion Completion handler with boolean which returns True if permission is granted else returns False
///
- (void)hasPermission:(AmityPermission)permission forCommunity:(NSString * _Nonnull)communityId completion:(void (^ _Nonnull)(BOOL))completion;
@end


/// Delegate for AmityClient instance. This delegate is used for
/// notifying various events or error from within the sdk.
SWIFT_PROTOCOL("_TtP8AmitySDK19AmityClientDelegate_")
@protocol AmityClientDelegate
/// Notifies about different asychronous error which can
/// occur within the sdk. These error can be
/// <ul>
///   <li>
///     when user is globally banned
///   </li>
///   <li>
///     when user has bad session or authentication etc.
///   </li>
/// </ul>
/// You can use the error message & error code and map it with
/// <code>AmityErrorCode</code> to know the type of the error.
/// \param error Error instance received from sdk
///
- (void)didReceiveErrorWithError:(NSError * _Nonnull)error;
/// Notifies when connection status changes in sdk.
/// \param status enum AmityConnectionStatus which defines different state of connection
///
- (void)didChangeConnectionStatusWithStatus:(enum AmityConnectionStatus)status SWIFT_DEPRECATED_MSG("This function will be removed in the future.");
@end


SWIFT_PROTOCOL("_TtP8AmitySDK24AmityClientErrorDelegate_") SWIFT_DEPRECATED_MSG("This protocol will be removed in the future. Please use `AmityClientDelegate` instead.")
@protocol AmityClientErrorDelegate <NSObject>
- (void)didReceiveAsyncError:(NSError * _Nonnull)error;
@end

@class AmityMentioneesBuilder;

/// Class for editing comment objects
SWIFT_CLASS("_TtC8AmitySDK18AmityCommentEditor")
@interface AmityCommentEditor : NSObject
/// Valid <code>AmityClient</code> instance used to initialize this class
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Comment Id being edited
@property (nonatomic, readonly, copy) NSString * _Nonnull commentId;
/// Initializes editor class
/// \param client valid <code>AmityClient</code> instance
///
/// \param commentId Id of the comment to edit
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client commentId:(NSString * _Nonnull)commentId OBJC_DESIGNATED_INITIALIZER;
/// Edits text of the comment
/// \param text New text for this comment
///
/// \param completion Block to be executed after request is completed.
///
- (void)editText:(NSString * _Nonnull)text completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Edits text of the comment.
/// Use this method if you also want to edit the metadata associated
/// with mentions in the comment.
/// \param text New text for this comment
///
/// \param metadata Metadata for the comment. This can contain information about mentions
///
/// \param mentionees MentioneesBuilder class for this comment
///
/// \param completion Block to be executed when request is completed.
///
- (void)editText:(NSString * _Nonnull)text metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nullable)mentionees completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for handling flag, unflag and isFlaggedByMe operation. Instance of this class should be held strongly.
SWIFT_CLASS("_TtC8AmitySDK19AmityCommentFlagger")
@interface AmityCommentFlagger : NSObject
/// Initializes comment flagger class.
/// \param client Valid AmityClient instance
///
/// \param commentId Id of the comment to flag.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client commentId:(NSString * _Nonnull)commentId OBJC_DESIGNATED_INITIALIZER;
/// Flags comment with given id.
/// \param completion Block to be executed after request is completed. It provides success status and error if any.
///
- (void)flagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags comment with given id.
/// \param completion Block to be executed after request is completed. It provides success status and error if any.
///
- (void)unflagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether this comment is flagged by currently logged in user or not
/// \param completion Completion block to be called after request is completed. Returns true if comment is flagged by you else provides false.
///
- (void)isFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides interface related to comment. You can create, delete, query comments and reaction using this Repository class.
SWIFT_CLASS("_TtC8AmitySDK22AmityCommentRepository")
@interface AmityCommentRepository : NSObject
/// Valid instance of <code>AmityClient</code>
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Initializes this repository class.
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Deletes the comment
/// If the object is hard deleted, all the references pointing to the object will be invalidated. You can check this via  <code>object.isInvalidated</code>
/// An attempt to access the invalidated object will result in crash. If your app keep the reference to hard deleted objects, please make sure you check against object validity.
/// \param commentId Id of the comment to delete
///
/// \param hardDelete If this flag is true, the SDK will delete comment from the database, instead of setting <code>isDeleted</code> flag.
///
/// \param completion A block executed when the request has completed.
///
- (void)deleteCommentWithId:(NSString * _Nonnull)commentId hardDelete:(BOOL)hardDelete completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityComment;
@class AmityReaction;

@interface AmityCommentRepository (SWIFT_EXTENSION(AmitySDK))
/// Creates a new comment. Comments are created locally and then synced with server.
/// You can observe the <code>syncState</code> property of <code>AmityComment</code> to determine if server sync was successful or not.
/// \param referenceId Id of the post or content that you want to create comment for
///
/// \param type ReferenceType for comment. It can be either post or content.
///
/// \param parentId Id of the parent comment. Provide this id, if you want to create a reply to a comment.
///
/// \param text Comment Text
///
///
/// returns:
/// Returns AmityObject of <code>AmityComment</code> object.
- (AmityObject<AmityComment *> * _Nonnull)createCommentForReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)type parentId:(NSString * _Nullable)parentId text:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Creates a new comment. Comments are created locally and then synced with server.
/// You can observe the <code>syncState</code> property of <code>AmityComment</code> to determine if server sync was successful or not.
/// \param referenceId Id of the post or content that you want to create comment for
///
/// \param type ReferenceType for comment. It can be either .post or .content. Use <code>.content</code> only if you are creating comment for some external post.
///
/// \param parentId Id of the parent comment. Provide this id, if you want to create a reply to a comment.
///
/// \param text Comment Text
///
/// \param metadata The metadata for the comment, it can contain information about mentions
///
/// \param mentionees The mentiones in the comment
///
///
/// returns:
/// Returns AmityObject of <code>AmityComment</code> object.
- (AmityObject<AmityComment *> * _Nonnull)createCommentForReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)type parentId:(NSString * _Nullable)parentId text:(NSString * _Nonnull)text metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees SWIFT_WARN_UNUSED_RESULT;
/// Returns single latest comment for given referenceId
/// \param referenceId The id of the post/content that you want to fetch latest comment
///
/// \param referenceType Reference type for this comment. Use .content as reference type if you are querying comments for external content else use .post
///
/// \param includeReplies Whether to include comment replies in latest comment or not. Set it to true If you want to fetch only latest parent comment.
///
///
/// returns:
/// AmityObject for <code>AmityComment</code> object
- (AmityObject<AmityComment *> * _Nonnull)getLatestCommentWithReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)referenceType includeReplies:(BOOL)includeReplies SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of comments for particular post/content.
/// You can also fetch comment thread. i.e all the comments under particular comment.
/// To do that set <code>filterByParentId</code> to true and pass the parent comment id in <code>parentId</code>.
/// If <code>filterByParentId</code> is true but no <code>parentId</code> is present,then the collection will return all comments without a parent.
/// remark:
/// When <code>orderBy</code> is set to<code>.ascending</code>, we will fetch the first (oldest) comments in chronological order: ABC first, then the next page etc.
/// <code>.descending</code>, we will fetch the last (newest) comments in reverse-chronological order: ZYX first, then the previous page etc.
/// It’s up to the developer to call the right <code>loadNext</code>/<code>loadPrevious</code> page in the returned collection based on the <code>orderBy</code> value:
/// note:
/// when asking for more comments, based on the orderBy preference, you’ll need to ask for the next page (if the order is <code>.ascending</code>)
/// or the previous page (if the reverse is <code>.descending</code>)
/// \param referenceId The id of the post/content that you want to fetch comment for.
///
/// \param type The reference type for this comment. Use .content as reference type if you are querying comments for external content else use .post.
///
/// \param filterByParentId Set this to true if you want to fetch comment thread
///
/// \param parentId The id of the parent comment.
///
/// \param orderOption Whether we’d like the collection in chronological order or not.
///
/// \param includeDeletedComments Boolean whether this collection should fetch comments along with deleted comments
///
///
/// returns:
/// The comments live collection.
- (AmityCollection<AmityComment *> * _Nonnull)getCommentsWithReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)type filterByParentId:(BOOL)filterByParentId parentId:(NSString * _Nullable)parentId orderBy:(AmityOrderBy)orderOption includeDeleted:(BOOL)includeDeletedComments SWIFT_WARN_UNUSED_RESULT;
/// Get all of the reactions on the specific comment.
/// \param commentId Id of particular comment
///
///
/// returns:
/// The <code>AmityReaction</code> live collection.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)commentId SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for subscription topic. Use one of the topics from below when subscribing to topic:
/// <code>AmityCommunityTopic</code>,<code>AmityPostTopic</code>,<code>AmityCommentTopic</code>,<code>AmityUserTopic</code>,<code>AmityFollowTopic</code>
SWIFT_PROTOCOL("_TtP8AmitySDK10AmityTopic_")
@protocol AmityTopic <NSObject>
/// Returns subscription topic
/// \param client Valid <code>AmityClient</code> instance
///
///
/// returns:
/// String of subscription topic
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
@end


/// Topic to subscribe to events related to comment. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK17AmityCommentTopic")
@interface AmityCommentTopic : NSObject <AmityTopic>
/// Initilize instance of this class
/// \param comment comment that will observe event
///
/// \param event event that will be observed
///
- (nonnull instancetype)initWithComment:(AmityComment * _Nonnull)comment andEvent:(AmityCommentEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AmityCommunityPostSettings : NSInteger;

@interface AmityCommunity (SWIFT_EXTENSION(AmitySDK))
@property (nonatomic, readonly) enum AmityCommunityPostSettings postSettings;
@end


/// Builder protocol for Community
SWIFT_PROTOCOL("_TtP8AmitySDK21AmityCommunityBuilder_")
@protocol AmityCommunityBuilder <AmityBuilder>
@end


/// Base Builder class which provides interface to create or update channel. Use specific builder class such as <code>AmityCommunityChannelBuilder</code>, <code>AmityLiveChannelBuilder</code>, <code>AmityConversationChannelBuilder</code> to create channel.
SWIFT_CLASS("_TtC8AmitySDK26AmityDefaultChannelBuilder")
@interface AmityDefaultChannelBuilder : NSObject <AmityChannelBuilderProtocol>
@property (nonatomic) AmityChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets display name for channel. Default value is nil
/// \param displayName Name to display for channel
///
- (void)setDisplayName:(NSString * _Nonnull)displayName;
/// Sets metadata for the channel. Default is [:]
/// \param metadata Extra metadata for this channel
///
- (void)setMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
/// Sets tags for channel.
/// \param tags Array of tags for this channel
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags;
/// Sets user ids who are the member of this channel
/// \param userIds Id of memebrs for this channel
///
- (void)setUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Sets avatar for this channel. Use <code>AmityFileRepository</code> to upload image
/// and use the AmityImageData instance that you get as response here.
/// \param avatarData Avatar data for this channel.
///
- (void)setAvatar:(AmityImageData * _Nonnull)avatarData;
/// Internal build method. Do not use this directly.
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// Builder class which provides interface to create channel of type community.
SWIFT_CLASS("_TtC8AmitySDK28AmityCommunityChannelBuilder")
@interface AmityCommunityChannelBuilder : AmityDefaultChannelBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets id for the channel. Default value is nil
/// \param channelId Id for the channel
///
- (void)setId:(NSString * _Nonnull)channelId;
@end


/// Data Builder class for community
SWIFT_CLASS("_TtC8AmitySDK25AmityCommunityDataBuilder")
@interface AmityCommunityDataBuilder : NSObject <AmityCommunityBuilder>
/// Sets display name for this community.
/// \param displayName Display name of the community
///
- (void)setDisplayName:(NSString * _Nonnull)displayName;
/// Sets description of the community
/// \param communityDescription Details about community.
///
- (void)setCommunityDescription:(NSString * _Nonnull)communityDescription;
/// Sets whether this community is public or private.
/// \param isPublic Boolean to indicate whether community is public or private
///
- (void)setIsPublic:(BOOL)isPublic;
/// Sets additional metadata for this community.
/// \param metadata Dictionary with key : value pairs
///
- (void)setMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
/// Sets category ids for this community. This links the categories to which
/// this community belongs.
/// \param categoryIds Id’s of community categories in string.
///
- (void)setCategoryIds:(NSArray<NSString *> * _Nonnull)categoryIds;
- (void)isPostReviewEnabled:(BOOL)isPostReviewEnabled SWIFT_DEPRECATED_MSG("Use `func setPostSettings(:)` instead.");
- (void)setPostSettings:(enum AmityCommunityPostSettings)postSettings;
/// Internal build method. Do not use this directly.
/// User do not have to set each method. But we still need to send
/// certain properties for creating community. So we build json structure
/// at the end.
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data Builder class for creating community.
SWIFT_CLASS("_TtC8AmitySDK33AmityCommunityCreationDataBuilder")
@interface AmityCommunityCreationDataBuilder : AmityCommunityDataBuilder
/// Sets userIds for this community
/// \param userIds Id of the user who will belong to this community.
///
- (void)setUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Sets avatar data for this community. Please use <code>AmityFileRepository</code> to
/// upload avatar
/// \param image <code>AmityImageData</code> obtained after uploading image using file repository.
///
- (void)setAvatar:(AmityImageData * _Nonnull)image;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Class providing interface for moderating community such as banning members, adding roles etc.
SWIFT_CLASS("_TtC8AmitySDK24AmityCommunityModeration")
@interface AmityCommunityModeration : NSObject
/// The client used to create the instance
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// The community Id associated with the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull communityId;
/// Designated intializer.
/// \param client A valid client instance.
///
/// \param communityId The Id of the channel to update.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andCommunity:(NSString * _Nonnull)communityId OBJC_DESIGNATED_INITIALIZER;
/// Ban members
/// \param userIds An array of userIds
///
/// \param completion A block executed when this request is complete.
///
- (void)banMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unban members
/// \param userIds An array of userIds
///
/// \param completion A block executed when this request is complete.
///
- (void)unbanMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Assigns roles to users.
/// \param roles Roles to be assigned
///
/// \param userIds Id of users to whom this roles is to be assigned
///
/// \param completion A block executed when this request is complete.
///
- (void)addRoles:(NSArray<NSString *> * _Nonnull)roles userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (void)addRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use addRoles method instead");
/// Removes roles assigned to users.
/// \param roles Roles to be removed
///
/// \param userIds Array of user ids from which this roles is to be removed
///
/// \param completion A block executed when this request is complete.
///
- (void)removeRoles:(NSArray<NSString *> * _Nonnull)roles userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (void)removeRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use removeRoles method instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityRoleFilter;

/// Class representing each notification event. This class helps to define events for which you want to receive notifications in a community.
SWIFT_CLASS("_TtC8AmitySDK31AmityCommunityNotificationEvent")
@interface AmityCommunityNotificationEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly) AmityCommunityNotificationEventType eventType;
@property (nonatomic, readonly) BOOL isNetworkEnabled;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly, strong) AmityRoleFilter * _Nullable roleFilter;
/// Initializes community event for push notification settings
/// \param eventType Type of event
///
/// \param isEnabled Whether notification should be enabled or not
///
/// \param roleFilter An optional filter for determining which user role that the user would like to receive notification from.
///
- (nonnull instancetype)initWithEventType:(AmityCommunityNotificationEventType)eventType isEnabled:(BOOL)isEnabled roleFilter:(AmityRoleFilter * _Nullable)roleFilter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Instance of current notification settings for community.
SWIFT_CLASS("_TtC8AmitySDK34AmityCommunityNotificationSettings")
@interface AmityCommunityNotificationSettings : NSObject
/// If notifications is enabled for this community
@property (nonatomic, readonly) BOOL isEnabled;
/// If user enabled notification for this community
@property (nonatomic, readonly) BOOL isUserEnabled;
/// The array of event in the community
@property (nonatomic, readonly, copy) NSArray<AmityCommunityNotificationEvent *> * _Nonnull events;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for managing notifications related to community.
SWIFT_CLASS("_TtC8AmitySDK34AmityCommunityNotificationsManager")
@interface AmityCommunityNotificationsManager : NSObject
/// Initializes notification manager instance
/// \param client Valid <code>AmityClient</code> instance
///
/// \param communityId Id of the community
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client communityId:(NSString * _Nonnull)communityId OBJC_DESIGNATED_INITIALIZER;
/// Enable community level push notification settings.
/// note:
/// This setting will take effect on particular community only.
/// \param events Array of event
///
/// \param completion Completion block to be executed.
///
- (void)enableFor:(NSArray<AmityCommunityNotificationEvent *> * _Nullable)events completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Disables community level push notification settings
/// \param completion Block to be executed when the request is completed.
///
- (void)disableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Retrieves community level push notification settings. This settings is for particular community.
/// \param completion Block to be executed when request is completed. This block returns<code>AmityCommunityNotificationSettings</code> instance.
///
- (void)getSettingsWithCompletion:(void (^ _Nullable)(AmityCommunityNotificationSettings * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityCommunityMember;

/// Class providing interface for managing participants of community such as adding members, removing members, querying members etc.
SWIFT_CLASS("_TtC8AmitySDK27AmityCommunityParticipation")
@interface AmityCommunityParticipation : NSObject
/// The client used to create the instance
@property (nonatomic, strong) AmityClient * _Nonnull client;
/// The channel Id associated with the instance
@property (nonatomic, copy) NSString * _Nonnull communityId;
/// Designated intializer
/// \param client A valid client instance
///
/// \param communityId The Id of the channel to update
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andCommunityId:(NSString * _Nonnull)communityId OBJC_DESIGNATED_INITIALIZER;
/// Adds users to the community
/// \param userIds An array of users Ids to add
///
/// \param completion A block executed when the request has completed
///
- (void)addMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes users from the channel
/// \param userIds An array of users Ids to remove
///
/// \param completion A block executed when the request has completed
///
- (void)removeMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Get membership information for particular user
/// \param userId The id of the user
///
///
/// returns:
/// Returns AmityCommunityMembership object
- (AmityCommunityMember * _Nullable)getMemberWithId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Get membership information for this community
/// \param membershipOptions Option to filter channel members
///
/// \param roles List of roles to filter. If you don’t want to filter by roles, set it empty array.
///
/// \param sortBy Sort option for member list
///
///
/// returns:
/// Live Collection of <code>AmityCommunityMember</code> object
- (AmityCollection<AmityCommunityMember *> * _Nonnull)getMembersWithMembershipOptions:(AmityCommunityMembershipFilterOption)membershipOptions roles:(NSArray<NSString *> * _Nonnull)roles sortBy:(AmityCommunityMembershipSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AmityCommunityPostSettings, open) {
  AmityCommunityPostSettingsOnlyAdminCanPost = 0,
  AmityCommunityPostSettingsAdminReviewPostRequired = 1,
  AmityCommunityPostSettingsAnyoneCanPost = 2,
};


/// Repository class for community providing interface for create, update, delete, join, and leave community.
SWIFT_CLASS("_TtC8AmitySDK24AmityCommunityRepository")
@interface AmityCommunityRepository : NSObject
/// Valid <code>AmityClient</code> instance
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Initializes AmityCommunity Repository
/// \param client Valid <code>AmityClient</code> instance.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Creates a new community.
/// \param builder Builder class for specifying various community properties. Use <code>AmityCommunityCreationDataBuilder</code> class for creating community.
///
/// \param completion Block called when community is created.
///
- (void)createCommunityWith:(id <AmityCommunityBuilder> _Nonnull)builder completion:(void (^ _Nonnull)(AmityCommunity * _Nullable, NSError * _Nullable))completion;
/// Updates community.
/// \param id Id of the community to update.
///
/// \param builder Builder class for specifying various community properties. Use <code>AmityCommunityUpdateDataBuilder</code> class for updating community.
///
/// \param completion Block called when community is updated.
///
- (void)updateCommunityWithId:(NSString * _Nonnull)id builder:(id <AmityCommunityBuilder> _Nonnull)builder completion:(void (^ _Nonnull)(AmityCommunity * _Nullable, NSError * _Nullable))completion;
/// Delete community with provided id
/// \param communityId Id of the community to delete
///
/// \param completion Block called after community is deleted.
///
- (void)deleteCommunityWithId:(NSString * _Nonnull)communityId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Join particular community & become member of that community.
/// \param communityId Id of the community to join
///
/// \param completion Block called after request completion
///
- (void)joinCommunityWithId:(NSString * _Nonnull)communityId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Leave community. Leaving a community changes membership status to none.
/// \param communityId Id of the community to leave
///
/// \param completion Block called after request completion
///
- (void)leaveCommunityWithId:(NSString * _Nonnull)communityId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityCommunityCategory;

@interface AmityCommunityRepository (SWIFT_EXTENSION(AmitySDK))
/// Returns community level push notification manager
/// \param communityId Id of the community
///
///
/// returns:
/// Instance of <code>AmityCommunityNotificationsManager</code> object
- (AmityCommunityNotificationsManager * _Nonnull)notificationManagerForCommunityId:(NSString * _Nonnull)communityId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves community for particular community id
/// \param communityId Id of the community
///
///
/// returns:
/// LiveObject of that community
- (AmityObject<AmityCommunity *> * _Nonnull)getCommunityWithId:(NSString * _Nonnull)communityId SWIFT_WARN_UNUSED_RESULT;
/// Get collection of communities
/// \param displayName Display name of community to search. Set it nil if you want to fetch all communities
///
/// \param filter Filter communities based on user membership
///
/// \param sortBy Sort fetched communities
///
/// \param categoryId Communities belonging to particular category. This is optional.
///
/// \param includeDeletedCommunities Should include deleted communities in the collection or not
///
///
/// returns:
/// Live Collection of <code>AmityCommunity</code> object.
- (AmityCollection<AmityCommunity *> * _Nonnull)getCommunitiesWithDisplayName:(NSString * _Nullable)displayName filter:(AmityCommunityQueryFilter)filter sortBy:(AmityCommunitySortOption)sortBy categoryId:(NSString * _Nullable)categoryId includeDeleted:(BOOL)includeDeletedCommunities SWIFT_WARN_UNUSED_RESULT;
/// Returns collection of trending communities
///
/// returns:
/// AmityCollection of <code>AmityCommunity</code> object.
- (AmityCollection<AmityCommunity *> * _Nonnull)getTrendingCommunities SWIFT_WARN_UNUSED_RESULT;
/// Returns collection of recommended communities
///
/// returns:
/// AmityCollection of <code>AmityCommunity</code> object
- (AmityCollection<AmityCommunity *> * _Nonnull)getRecommendedCommunities SWIFT_WARN_UNUSED_RESULT;
/// Fetches all community categories
/// \param sortBy Option to sort categories.
///
/// \param includeDeletedCategories If deleted categories should be included in list or not
///
///
/// returns:
/// AmityCollection of <code>AmityCommunityCategory</code> object.
- (AmityCollection<AmityCommunityCategory *> * _Nonnull)getCategoriesWithSortBy:(AmityCommunityCategoriesSortOption)sortBy includeDeleted:(BOOL)includeDeletedCategories SWIFT_WARN_UNUSED_RESULT;
/// Search for members in community.
/// \param communityId Id of the community to search for
///
/// \param displayName Display name of member to match.
///
/// \param membershipOptions User membership status in community to search for.
///
/// \param roles List of roles to filter. If you don’t want to filter by roles, set it empty array.
///
/// \param sortBy Sort list of members
///
///
/// returns:
/// LiveCollection of <code>AmityCommunityMember</code> list which matches above search criteria.
- (AmityCollection<AmityCommunityMember *> * _Nonnull)searchMembersWithCommunityId:(NSString * _Nonnull)communityId displayName:(NSString * _Nonnull)displayName membership:(AmityCommunityMembershipFilterOption)membershipOptions roles:(NSArray<NSString *> * _Nonnull)roles sortBy:(AmityCommunityMembershipSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
@end


/// Topic to subscribe to events related to communities. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK19AmityCommunityTopic")
@interface AmityCommunityTopic : NSObject <AmityTopic>
/// Initilize instance of this class
/// \param community community that will observe event
///
/// \param event event that will be observed
///
- (nonnull instancetype)initWithCommunity:(AmityCommunity * _Nonnull)community andEvent:(AmityCommunityEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data Builder class for updating community
SWIFT_CLASS("_TtC8AmitySDK31AmityCommunityUpdateDataBuilder")
@interface AmityCommunityUpdateDataBuilder : AmityCommunityDataBuilder
/// Sets avatar data for this community. Please use <code>AmityFileRepository</code> to
/// upload avatar
/// \param image <code>AmityImageData</code> obtained after uploading image using file repository. If you want to remote existing avatar, pass nil value.
///
- (void)setAvatar:(AmityImageData * _Nullable)image;
- (void)setIsPublic:(BOOL)isPublic;
- (void)isPostReviewEnabled:(BOOL)isPostReviewEnabled SWIFT_DEPRECATED_MSG("Use `func setPostSettings(:)` instead.");
- (void)setPostSettings:(enum AmityCommunityPostSettings)postSettings;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Connection status of sdk.
typedef SWIFT_ENUM(NSInteger, AmityConnectionStatus, open) {
  AmityConnectionStatusNotConnected = 0,
  AmityConnectionStatusDisconnected = 1,
  AmityConnectionStatusConnecting = 2,
  AmityConnectionStatusConnected = 3,
};


/// Builder class which provides interface to create channel of type conversation.
SWIFT_CLASS("_TtC8AmitySDK31AmityConversationChannelBuilder")
@interface AmityConversationChannelBuilder : AmityDefaultChannelBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets single user id for this channel.
- (void)setUserId:(NSString * _Nonnull)userId;
/// If this conversation is distinct or not. Default value is true.
/// note:
///
/// If a channel is distinct, it means creating a conversation channel
/// with same userId would result in same channel instead of creating a
/// new one.
/// \param isDistinct Set true if distinct else set false
///
- (void)setIsDistinct:(BOOL)isDistinct;
/// Internal method. Do not use directly
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end



/// Class for configuring endpoints for AmitySDK.
SWIFT_CLASS("_TtC8AmitySDK13AmityEndpoint")
@interface AmityEndpoint : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable httpUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable rpcUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable mqttUrl;
/// Initializes network endpoint with provided url parameters. If any url parameter is nil,
/// it uses default value of Global Region configuration.
/// \param httpUrl Valid http host url
///
/// \param rpcUrl Valid websocket host url
///
/// \param mqttUrl Valid mqtt host address without scheme i.e “broker.emqx.io”
///
- (nonnull instancetype)initWithHttpUrl:(NSString * _Nullable)httpUrl rpcUrl:(NSString * _Nullable)rpcUrl mqttHost:(NSString * _Nullable)mqttHost OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityPostRepository;
@protocol AmityPostBuilder;
@class AmityPost;

/// Repository class which provides interface for querying various types of feed.
SWIFT_CLASS("_TtC8AmitySDK19AmityFeedRepository")
@interface AmityFeedRepository : NSObject
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
@property (nonatomic, readonly, strong) AmityPostRepository * _Nonnull postRepository;
/// Initializer for Feed Repository
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
- (void)createPost:(id <AmityPostBuilder> _Nonnull)builder targetId:(NSString * _Nullable)targetId targetType:(AmityPostTargetType)targetType completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)updatePostWithPostId:(NSString * _Nonnull)postId builder:(id <AmityPostBuilder> _Nonnull)builder completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)deletePostWithPostId:(NSString * _Nonnull)postId parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)approvePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)declinePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AmityFeedRepository (SWIFT_EXTENSION(AmitySDK))
- (AmityObject<AmityPost *> * _Nonnull)getPostForPostId:(NSString * _Nonnull)postId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)postId reactionName:(NSString * _Nullable)reactionName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
/// Gets list of posts for own feed
/// \param sortBy Sort option for posts
///
/// \param includeDeletedPosts Whether to include deleted posts in list or not
///
///
/// returns:
/// Live collection for <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getMyFeedSortedBy:(AmityPostQuerySortOption)sortBy includeDeleted:(BOOL)includeDeletedPosts SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from user feed
/// \param userId Id of the user to fetch posts for
///
/// \param sortBy Sort option for posts
///
/// \param includeDeletedPosts Whether to include deleted posts in list or not
///
///
/// returns:
/// Live Collection of <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getUserFeed:(NSString * _Nonnull)userId sortBy:(AmityPostQuerySortOption)sortBy includeDeleted:(BOOL)includeDeletedPosts SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from global feed.
///
/// returns:
/// Live Collection of <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getGlobalFeed SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from global feed which are ranked with custom algorithm.
///
/// returns:
/// Live collection of <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getCustomPostRankingGlobalfeed SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from community feed.
/// \param communityId Id of the community
///
/// \param sortBy Sort option for posts.
///
/// \param includeDeletedPosts Whether to include deleted posts in list or not
///
/// \param feedType Type of feed.
///
///
/// returns:
/// Live collection of <code>AmityPost</code> object.
- (AmityCollection<AmityPost *> * _Nonnull)getCommunityFeedWithCommunityId:(NSString * _Nonnull)communityId sortBy:(AmityPostQuerySortOption)sortBy includeDeleted:(BOOL)includeDeletedPosts feedType:(AmityFeedType)feedType SWIFT_WARN_UNUSED_RESULT;
@end


/// Class containing information about uploaded files. This class is not meant to be subclassed and
/// its instance is not made to be created by user. Please use the instance of this class returned by sdk.
SWIFT_CLASS("_TtC8AmitySDK13AmityFileData")
@interface AmityFileData : NSObject
/// Id of the file
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// URL of the file. This url can be used for downloading file.
@property (nonatomic, copy) NSString * _Nonnull fileURL;
/// Additional attributes attached with this file
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Initializes file data from server response.
- (nonnull instancetype)initWithResponse:(NSDictionary<NSString *, id> * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Initializes file data.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder protocol for Post
SWIFT_PROTOCOL("_TtP8AmitySDK16AmityPostBuilder_")
@protocol AmityPostBuilder <AmityBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
@end


/// Builder class which provides interface to create post of type <code>file</code>.
SWIFT_CLASS("_TtC8AmitySDK20AmityFilePostBuilder")
@interface AmityFilePostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class NSURL;
@class AmityUploadableFile;
@class AmityVideoData;
@class NSData;

/// Class for performing file upload/download related actions in sdk. It provides various convenient methods for uploading images, files, videos as well as downloading them. All upload/download operation happens asynchronously.
SWIFT_CLASS("_TtC8AmitySDK19AmityFileRepository")
@interface AmityFileRepository : NSObject
/// Initalizes FileRepository class
/// \param client Valid AmityClient instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Asynchronously uploads an image to server. This method also allows you to track the progress of the upload.
/// This method is not suitable for uploading image of large size. We recommend using URL based <code>uploadImage(withURL:_)</code> method for uploading image of any size.
/// \param image UIImage to be uploaded
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded image data is returned else error is returned.
///
- (void)uploadImage:(UIImage * _Nonnull)image progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityImageData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously Uploads an image to server. This method also allows you to track the progress of the upload.
/// SDK generates multiple (small, medium & large) versions of images based on <code>isFullImage</code> parameter.
/// \param url URL of the image to upload. This URL should be from local file system.
///
/// \param isFullImage If this image is the large sized image. If this parameter is true, server generates images of multiple size.
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded image data is returned else error is returned.
///
- (void)uploadImageWith:(NSURL * _Nonnull)url isFullImage:(BOOL)isFullImage progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityImageData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously uploads a file to server. This method also allows you to track the progress of the upload.
/// This method is not suitable for uploading file of large size. We recommend using URL based <code>uploadFile(with url:_)</code> method for uploading files of any size.
/// \param file A file to be uploaded.
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded file data is returned else error is returned.
///
- (void)uploadFile:(AmityUploadableFile * _Nonnull)file progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityFileData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously uploads a file to server. This method also allows you to track the progress of the upload.
/// \param url URL of the file in local file system to be uploaded
///
/// \param fileName Name for the file to be uploaded. If file name is not specified, it is automatically determined from the URL.
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded file data is returned else error is returned.
///
- (void)uploadFileWith:(NSURL * _Nonnull)url fileName:(NSString * _Nullable)fileName progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityFileData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously uploads video file to server.
/// \param url URL of the video from file system to be uploaded
///
/// \param progress Progress block called during upload process. This block can be called multiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload is successful, the uploaded video data is returned else error is returned.
///
- (void)uploadVideoWith:(NSURL * _Nonnull)url progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityVideoData * _Nullable, NSError * _Nullable))completion;
/// Downloads image asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// Image downloaded using AmityFileRepository are not cached by SDK. This method is not suitable for downloading image of large size. We recommend using URL based <code>downloadImage(fromURL: _)</code> method.
/// \param url The URL of the image to be downloaded.
///
/// \param size The size in which image is to be downloaded.
///
/// \param completion Completion block called once download operation is complete. If download was successful, then UIImage is returned else error is returned.
///
- (void)downloadImageAsDataFromURL:(NSString * _Nonnull)url size:(AmityMediaSize)size completion:(void (^ _Nonnull)(UIImage * _Nullable, AmityMediaSize, NSError * _Nullable))completion;
/// Downloads image asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// This method downloads the image data and writes it to a file in <code>Caches</code> directory in file system. If the download is success, this URL of the downloaded file will be returned. Incase of error, an error object will be returned through completion handler. It is upto the user to consume the file directly from the location provided or move it to any other appropriate location.
/// \code
/// let image = UIImage(contentsOfFile: <downloadedURL>.path)
///
/// \endcodenote:
/// Image downloaded using AmityFileRepository are not cached by SDK. User should maintain their own cache system.
/// \param url The URL for the image to be downloaded
///
/// \param size The size in which image is to be downloaded.
///
/// \param completion Completion block called once download operation is complete. If download was successful, then URL is returned else error is returned.
///
- (void)downloadImageFromURL:(NSString * _Nonnull)url size:(AmityMediaSize)size completion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
/// Downloads file asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// This method is not suitable for downloading file of large size. We recommend using URL based <code>downloadFile(fromURL: _)</code> method.
/// note:
/// Files downloaded using AmityFileRepository are not cached by SDK. User should maintain their own cache system.
/// \param url URL of the file to be downloaded
///
/// \param completion Returns the downloaded file if success. Else returns error
///
- (void)downloadFileAsDataFromURL:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/// Downloads file asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// Files are downloaded directly to file system in <code>Caches</code> directory. If the download is success, this URL of the downloaded file will be returned. Incase of error, an error object will be returned through completion handler. It is upto the user to consume the file directly from the location provided or move it to any other appropriate location.
/// note:
/// Files downloaded using AmityFileRepository are not cached by SDK. User should maintain their own cache system.
/// \param url URL of the file to be downloaded
///
/// \param completion Block to be executed after download operation is complete. Returns URL of the downloaded file in case of success else returns error
///
- (void)downloadFileFromURL:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
/// Notifies user about progress of particular upload.
/// Sometimes you would want to observe the progress of particular upload. Example: you are sending an image message and want to show progress indicator for image. This method lets you track the progress of the upload.
/// \param uploadId Identifier for particular upload. Example: For message this can be messageId. Refer to documentation for more details
///
/// \param progress Returns progress value ranging from 0.0 - 1.0. This handler can get called multiple times.
///
- (void)getUploadProgressForUploadId:(NSString * _Nonnull)id progress:(void (^ _Nonnull)(double))progress;
/// Cancels the download of file.
/// \param url URL of the file being downloaded
///
- (void)cancelFileDownload:(NSString * _Nonnull)url;
/// Cancels download of images from file service
/// \param url URL of the image being downloaded
///
/// \param size Size of image
///
- (void)cancelImageDownload:(NSString * _Nonnull)url size:(AmityMediaSize)size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Response for follow / unfollow / accept / decline action.
SWIFT_CLASS("_TtC8AmitySDK19AmityFollowResponse")
@interface AmityFollowResponse : NSObject
/// User who initiated the request
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceUserId;
/// User to whom this request is initiated.
@property (nonatomic, readonly, copy) NSString * _Nonnull targetUserId;
/// Follow status between source & target user.
@property (nonatomic) AmityFollowStatus status;
- (AmityFollowStatus)statusFromStringWithStr:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Topic to subscribe to events related to user. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK16AmityFollowTopic")
@interface AmityFollowTopic : NSObject <AmityTopic>
- (nonnull instancetype)initWithEvent:(AmityFollowEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class containing information about uploaded image. This class is not meant to be subclassed and
/// its instance is not made to be created by user. Please use the instance of this class returned by sdk.
SWIFT_CLASS("_TtC8AmitySDK14AmityImageData")
@interface AmityImageData : NSObject
/// Id of the image file uploaded
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// Url of the image file uploaded. This url can be used for downloading file.
@property (nonatomic, copy) NSString * _Nonnull fileURL;
/// Additional attributes for this image such as its size etc.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Additional metadata associated with this image.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metadata;
/// Initializes image data from server response.
- (nonnull instancetype)initWithResponse:(NSDictionary<NSString *, id> * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Initializes file data
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder class which provides interface to create post of type <code>image</code>.
SWIFT_CLASS("_TtC8AmitySDK21AmityImagePostBuilder")
@interface AmityImagePostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder class which provides interface to create channel of type <code>live</code>.
SWIFT_CLASS("_TtC8AmitySDK23AmityLiveChannelBuilder")
@interface AmityLiveChannelBuilder : AmityDefaultChannelBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets id for the channel. Default value is nil
/// \param channelId Id for the channel
///
- (void)setId:(NSString * _Nonnull)channelId;
@end


/// Builder class which provides interface to create post of type <code>liveStream</code>.
SWIFT_CLASS("_TtC8AmitySDK26AmityLiveStreamPostBuilder")
@interface AmityLiveStreamPostBuilder : NSObject <AmityPostBuilder>
- (nonnull instancetype)initWithStreamId:(NSString * _Nonnull)streamId text:(NSString * _Nullable)text OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides data of RTMP url.
/// The standard full url format can be found at <code>url</code> property.
/// For custom RTMP url formatting, please look into other properties in this class.
SWIFT_CLASS("_TtC8AmitySDK22AmityLiveStreamURLInfo")
@interface AmityLiveStreamURLInfo : NSObject
/// The full RTMP url, that most RTMP players support.
@property (nonatomic, copy) NSURL * _Nonnull url;
/// The origin in the url.
@property (nonatomic, copy) NSString * _Nonnull origin;
/// The app name in the url.
@property (nonatomic, copy) NSString * _Nonnull appName;
/// The stream name in the url.
@property (nonatomic, copy) NSString * _Nonnull streamName;
/// The query parameters in the url.
@property (nonatomic, copy) NSString * _Nonnull query;
+ (AmityLiveStreamURLInfo * _Nonnull)makeFromWatcherUrlInfo:(NSDictionary<NSString *, id> * _Nonnull)rtmpInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum AmityLiveVideoRecordingFileFormat : NSInteger;

/// Instance of live video recording data.
SWIFT_CLASS("_TtC8AmitySDK27AmityLiveVideoRecordingData")
@interface AmityLiveVideoRecordingData : NSObject
- (nonnull instancetype)initWithValue:(NSDictionary<NSString *, id> * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
/// Returns video recording url.
/// \param format File format of the video recording that you want the url for.
///
///
/// returns:
/// URL of the video recording for given file format.
- (NSURL * _Nullable)urlFor:(enum AmityLiveVideoRecordingFileFormat)format SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// LiveVideoRecording file format
typedef SWIFT_ENUM(NSInteger, AmityLiveVideoRecordingFileFormat, open) {
  AmityLiveVideoRecordingFileFormatMP4 = 0,
  AmityLiveVideoRecordingFileFormatFLV = 1,
  AmityLiveVideoRecordingFileFormatM3U8 = 2,
};

enum AmityLogLevel : NSInteger;

/// Console Logger class used in sdk. This class is used internally in sdk to log various sdk information. These information can be valuable during development or intergration of sdk.
/// Users can view necessary logs by setting <code>logLevel</code> to appropriate value. By default, sdk prints
/// warning logs.
SWIFT_CLASS("_TtC8AmitySDK8AmityLog")
@interface AmityLog : NSObject
/// Sets log level. All logs gets printed on xcode console. By default, log level is .warn
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AmityLogLevel logLevel;)
+ (enum AmityLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum AmityLogLevel)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum specifies different levels of logging for sdk. Log Level can be set as <code>AmityLog.logLevel = .warn</code>.
typedef SWIFT_ENUM(NSInteger, AmityLogLevel, open) {
/// Debugging logs.
  AmityLogLevelDebug = 0,
/// Warning logs
  AmityLogLevelWarn = 1,
/// Error logs
  AmityLogLevelError = 2,
/// All types of logs
  AmityLogLevelAll = 3,
/// Don’t show any kinds of logs
  AmityLogLevelNone = 4,
};


/// This class represents information about mention type, position of the mention, length of the mention and userId if type is not channel.
SWIFT_CLASS("_TtC8AmitySDK12AmityMention")
@interface AmityMention : NSObject
/// The type of mention. Type can be user or channel
@property (nonatomic, readonly) AmityMessageMentionType type;
/// The index of mention started from “@” character.
@property (nonatomic) NSInteger index;
/// The length of the mention started from “@” character
@property (nonatomic, readonly) NSInteger length;
/// The userId who was mentioned in the message. There is no need to provide userId If type is channel
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// Creates new instance of AmityMention
/// \param type Type of mention
///
/// \param index index of mention started from “@” character
///
/// \param length length of mention started from “@” character
///
/// \param userId The userId who was mentioned in the message. There is no need to provide userId If type is channel
///
- (nonnull instancetype)initWithType:(AmityMessageMentionType)type index:(NSInteger)index length:(NSInteger)length userId:(NSString * _Nullable)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AmityMentionMapper is a helper class, which helps:
/// <ul>
///   <li>
///     to convert mentions from metadata if metadata contains information about mentions,
///   </li>
///   <li>
///     to convert metadata from array of AmityMention objects.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8AmitySDK18AmityMentionMapper")
@interface AmityMentionMapper : NSObject
/// Converts the metadata into the array of AmityMention if metadata contains information about mentions.
/// \param metadata The metadata which supposed to contains information about mentions.
///
///
/// returns:
/// Array of AmityMention if metadata contains information about mentions.
+ (NSArray<AmityMention *> * _Nonnull)mentionsFromMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
/// Converts the array of mentions into metadata.
/// \param mentions The array of AmityMention.
///
///
/// returns:
/// Dictionary which contains the array of AmityMention
+ (NSDictionary<NSString *, id> * _Nonnull)metadataFrom:(NSArray<AmityMention *> * _Nonnull)mentions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents information about mention type and array of userIds if type is not channel.
SWIFT_CLASS("_TtC8AmitySDK15AmityMentionees")
@interface AmityMentionees : NSObject
@property (nonatomic, readonly) AmityMessageMentionType type;
@property (nonatomic, readonly, copy) NSArray<AmityUser *> * _Nullable users;
- (nonnull instancetype)initWithType:(AmityMessageMentionType)type andUsers:(NSArray<AmityUser *> * _Nullable)users OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AmityMentioneesBuilder which builds the mentionees payload.
SWIFT_CLASS("_TtC8AmitySDK22AmityMentioneesBuilder")
@interface AmityMentioneesBuilder : NSObject
/// Mention channel to be able to notify everyone
- (void)mentionChannel;
/// Mention users who must be notified
/// \param userIds the array of mentioned userIds
///
- (void)mentionUsersWithUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Builds the dictionary for mentionees
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class provides interface for editing messages.
SWIFT_CLASS("_TtC8AmitySDK18AmityMessageEditor")
@interface AmityMessageEditor : NSObject
/// Initializes Message Editor class.
/// \param client Valid <code>AmityClient</code> instance
///
/// \param messageId Id of the message to edit.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client messageId:(NSString * _Nonnull)messageId OBJC_DESIGNATED_INITIALIZER;
/// Edits the text message
/// \param text Text to be edited
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)editText:(NSString * _Nonnull)text completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Edits the text message
/// \param text Text to be edited
///
/// \param metadata Metadata for the message. It can contain information about mentions
///
/// \param mentionees Mentionees Builder class
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)editText:(NSString * _Nonnull)text metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nullable)mentionees completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Edits custom message
/// \param customMessage Updated custom message
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)editCustomMessage:(NSDictionary<NSString *, id> * _Nonnull)customMessage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Sets tag for the message. As long as the user is a member of a channel, that user can set the tags
/// to any messages of that channel.
/// \param tags Array of tags to be set.
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)setTags:(NSArray<NSString *> * _Nullable)tags completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides interface for flagging / unflagging message. Instance of this class should be held strongly.
SWIFT_CLASS("_TtC8AmitySDK19AmityMessageFlagger")
@interface AmityMessageFlagger : NSObject
/// Initializes Message Flagger class.
/// \param client Valid <code>AmityClient</code> instance
///
/// \param messageId Id of the message to flag.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client messageId:(NSString * _Nonnull)messageId OBJC_DESIGNATED_INITIALIZER;
/// Flags the message. This is reported to the admin panel for the moderators to see.
/// \param completion Completion block to be executed when request is completed.
///
- (void)flagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags the message
/// \param completion Completion block to be executed when request is completed.
///
- (void)unflagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether the message is already flagged or not.
/// \param completion Completion block to be executed when request is completed.
///
- (void)isFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityMessage;

/// This class provides interface related to message. You can create, delete & query message using this Repository class.
SWIFT_CLASS("_TtC8AmitySDK22AmityMessageRepository")
@interface AmityMessageRepository : NSObject
/// Valid <code>AmityClient</code> instance used to initialize this repo.
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Initializes MessageRepository class
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Deletes message with provided id. Deleted AmityMessage would have isDeleted set to true.
/// \param messageId Id of the message to delete
///
/// \param completion A block executed when the request is completed.
///
- (void)deleteMessageWithId:(NSString * _Nonnull)messageId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes all failed messages.
/// \param completion Block to be executed when request is completed.
///
- (void)deleteFailedMessages:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes single failed message.
/// \param messageId Id of the message to delete.
///
/// \param completion Block to be executed when request is completed.
///
- (void)deleteFailedMessage:(NSString * _Nonnull)messageId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Creates a custom message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// The data of the message should support JSONSerialization.
/// \param channelId Id of the channel to create message in
///
/// \param data Custom Data for this message. This data is serialized using JSONSerialization. All dictionary keys should be NStrings and Values can be String, Number, Array, Dictionary or NSNull. Failing to do so would result in exception.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createCustomMessageWithChannelId:(NSString * _Nonnull)channelId data:(NSDictionary<NSString *, id> * _Nonnull)data tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a new text message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// \param channelId Id of the channel to create message.
///
/// \param text The text message to be sent.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createTextMessageWithChannelId:(NSString * _Nonnull)channelId text:(NSString * _Nonnull)text tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a new text message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// \param channelId Id of the channel to create message.
///
/// \param text The text message to be sent.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param metadata The metadata for the message. It can contain information about mentions.
///
/// \param mentionees Builder class for creating mentionees.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createTextMessageWithChannelId:(NSString * _Nonnull)channelId text:(NSString * _Nonnull)text tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a new text message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// \param channelId Id of the channel to create message.
///
/// \param imageFile URL for the image in local file system
///
/// \param caption Any caption for this image
///
/// \param fullImage Whether or not this image should be sent at full resolution. If <code>fullImage</code> is set to true, server automatically generates multiple size of the same images which can be downloaded later using <code>AmityFileRepository</code>. Else only one size of image will be available.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createImageMessageWithChannelId:(NSString * _Nonnull)channelId imageFile:(NSURL * _Nonnull)imageURL caption:(NSString * _Nullable)caption fullImage:(BOOL)fullImage tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates audio message.
/// \param channelId Id of the channel to create message.
///
/// \param audioFileURL URL for the audio file in local file system.
///
/// \param fileName Name for this audio file. If a file name is provided that would be used else sdk would try to determine the file name based on url last path component.
///
/// \param parentId Id of the parent message. If this message is a “reply-to” for some other message, you can provide id of that message.
///
/// \param tags Array of tags for this message.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createAudioMessageWithChannelId:(NSString * _Nonnull)channelId audioFile:(NSURL * _Nonnull)audioFileURL fileName:(NSString * _Nullable)fileName parentId:(NSString * _Nullable)parentId tags:(NSArray<NSString *> * _Nullable)tags completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a file message
/// \param channelId Id of the channel to create message.
///
/// \param fileURL URL for the file from local file system.
///
/// \param filename Name for this file. If a file name is provided that would be used else sdk would try to determine the file name based on url last path component.
///
/// \param caption Caption for uploaded file.
///
/// \param tags Array of tags for this message.
///
/// \param parentId Id of the parent message. If this message is a “reply-to” for some other message, you can provide id of that message.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created
- (NSString * _Nonnull)createFileMessageWithChannelId:(NSString * _Nonnull)channelId file:(NSURL * _Nonnull)fileURL filename:(NSString * _Nullable)filename caption:(NSString * _Nullable)caption tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Create a video message
/// \param channelId Id of the channel to create message.
///
/// \param videoURL URL for the video from local file system.
///
/// \param filename Name for this video. If a file name is provided that would be used else sdk would try to determine the file name based on url last path component.
///
/// \param caption Caption for uploaded video.
///
/// \param tags Array of tags for this message.
///
/// \param parentId Id of the parent message. If this message is a “reply-to” for some other message, you can provide id of that message.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created
- (NSString * _Nonnull)createVideoMessageWithChannelId:(NSString * _Nonnull)channelId videoFile:(NSURL * _Nonnull)videoURL filename:(NSString * _Nullable)filename caption:(NSString * _Nullable)caption tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Returns existing message for provided id
/// \param messageId Valid message id
///
///
/// returns:
/// Live Object for <code>AmityMessage</code> object.
- (AmityObject<AmityMessage *> * _Nullable)getMessage:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a collection of all messages filtered by the given <code>channelId</code>, <code>tags</code>, and <code>parentId</code>.
/// When observing changes on the collection, the only time AmityCollectionChange gives back a deletion update (on messages) is
/// when the user has been banned or has left the channel: to confirm this, you can also observe changes in the AmityChannel
/// object(if this also gets deleted, you have either left the channel or you’ve been banned).
/// Let’s say that a channel has the messages (in chronological order):
/// ABC…XYZ
/// When <code>reverse</code> is set to:
/// <ul>
///   <li>
///     <code>false</code>, we will fetch the first (oldest)
///     messages in chronological order: ABC first, then the next page etc.
///   </li>
///   <li>
///     <code>true</code>, we will fetch the last (newest) messages
///     in reverse-chronological order: ZYX first, then the previous page etc.
///   </li>
/// </ul>
/// It’s up to the developer to call the right <code>loadNext</code>/<code>loadPrevious</code> page in
/// the returned collection based on the <code>reverse</code> value:
/// <ul>
///   <li>
///     <code>loadNext</code> loads newer messages in comparison with the last loaded page
///   </li>
///   <li>
///     <code>loadPrevious</code> loads older messages in comparison with the last loaded page
///   </li>
/// </ul>
/// when asking for more messages, based on the reverse preference, you’ll need to ask for the next page (if the reverse is <code>false</code>) or the previous page (if the reverse is <code>true</code>).
/// A message is matched when it contains ANY tag listed in includingTags, and contains NONE of the tags listed in excludingTags.
/// \param channelId Id of the channel to fetch messages
///
/// \param includingTags Array of tags that message should contain. Pass empty array if you do not want to filter messages.
///
/// \param excludingTags Array of tags that message should not contain. Pass empty array if you do not want to filter messages.
///
/// \param filterByParentId Whether messages should be filtered by parent id or not. If true, <code>parentId</code> should be provided.
///
/// \param parentId <code>messageId</code> of the message of the parent whose childs we are interested in
///
/// \param reverse Whether we’d like the collection in chronological order or not.
///
///
/// returns:
/// <code>AmityCollection</code> of <code>AmityMessage</code>.
- (AmityCollection<AmityMessage *> * _Nonnull)getMessagesWithChannelId:(NSString * _Nonnull)channelId includingTags:(NSArray<NSString *> * _Nonnull)includingTags excludingTags:(NSArray<NSString *> * _Nonnull)excludingTags filterByParentId:(BOOL)filterByParentId parentId:(NSString * _Nullable)parentId reverse:(BOOL)reverse SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use queryMessages(options: AmityMessageQueryOptions) instead");
/// Get all reactions for specific message
/// \param messageId Id of the message
///
///
/// returns:
/// The <code>AmityReaction</code> live collection.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Token which ties to the life cycle of AmityObject or AmityCollection. As long as this token is retained, live object or live collection can be observed. Do not initialize this instance directly. Instead use the token returned from <code>observe</code> or <code>observeOnce</code> method from <code>AmityObject</code> or <code>AmityCollection</code>.
SWIFT_CLASS("_TtC8AmitySDK22AmityNotificationToken")
@interface AmityNotificationToken : NSObject
/// Indicates validity status for this token. Do not use this directly.
/// Use <code>invalidate()</code> method to invalidate a token
@property (nonatomic, readonly) BOOL invalid;
/// Indicates notification validity for this token. Do not use this directly.
@property (nonatomic) BOOL notifyOnce;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This doesn’t have to be a live collection
- (nonnull instancetype)initWithLiveCollection:(NSObject * _Nonnull)liveCollection OBJC_DESIGNATED_INITIALIZER;
/// This doesn’t have to be a live object
- (nonnull instancetype)initWithLiveObject:(NSObject * _Nonnull)liveObject OBJC_DESIGNATED_INITIALIZER;
- (void)invalidate;
@end


/// Builder protocol for Poll
SWIFT_PROTOCOL("_TtP8AmitySDK16AmityPollBuilder_")
@protocol AmityPollBuilder <AmityBuilder>
@end


/// Builder class which provides interface to create <code>poll</code> which can be used in post.
SWIFT_CLASS("_TtC8AmitySDK24AmityPollCreationBuilder")
@interface AmityPollCreationBuilder : NSObject <AmityPollBuilder>
/// Represents the json representation of the poll
///
/// returns:
/// json repsentation for poll
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder class which provides interface to create post of type <code>poll</code>.
SWIFT_CLASS("_TtC8AmitySDK20AmityPollPostBuilder")
@interface AmityPollPostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Repository provides access to feed and collections of feeds
SWIFT_CLASS("_TtC8AmitySDK19AmityPollRepository")
@interface AmityPollRepository : NSObject
/// Designated intializer
/// \param client A valid context instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Create a poll
/// \param builder A type of AmityPollBuilder object.
///
- (void)createPoll:(id <AmityPollBuilder> _Nonnull)builder completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/// Close the specific poll with poll id
/// \param pollId A poll id represent the poll object
///
- (void)closePollWithId:(NSString * _Nonnull)pollId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Vote the specific poll with poll id
/// \param pollId A poll id represent the poll object
///
/// \param answerIds Array of answerIds
///
- (void)votePollWithId:(NSString * _Nonnull)pollId answerIds:(NSArray<NSString *> * _Nonnull)answerIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AmityVideoDataQuality : NSInteger;

@interface AmityPost (SWIFT_EXTENSION(AmitySDK))
- (AmityVideoData * _Nullable)getVideoInfoForQuality:(enum AmityVideoDataQuality)quality SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This function will be removed in the future. Please use `getVideoInfo()` instead.");
- (NSDictionary<NSNumber *, AmityVideoData *> * _Nonnull)getVideosInfo SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This function will be removed in the future. Please use `getVideoInfo()` instead.");
@end



/// This class provides interface for flagging / unflagging post. Instance of this class should be held strongly.
SWIFT_CLASS("_TtC8AmitySDK16AmityPostFlagger")
@interface AmityPostFlagger : NSObject
/// Initializes Post Flagger class
/// \param client Valid <code>AmityClient</code> instance
///
/// \param postId Id of the post to flag
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client postId:(NSString * _Nonnull)postId OBJC_DESIGNATED_INITIALIZER;
/// Flags the post
/// \param completion Completion Block called after request is executed
///
- (void)flagPostWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags the post
/// \param completion Completion block called after request is executed
///
- (void)unflagPostWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether this particular post is flagged by you or not. If its not flagged, the completion handler
/// is executed immediately else async request is made to return your flag status.
/// \param completion Completion block called after request is executed.
///
- (void)isPostFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents post query options.
SWIFT_CLASS("_TtC8AmitySDK21AmityPostQueryOptions")
@interface AmityPostQueryOptions : NSObject
/// The target type.
@property (nonatomic, readonly) AmityPostTargetType targetType;
/// The target id.
@property (nonatomic, readonly, copy) NSString * _Nonnull targetId;
/// The collection ordering.
@property (nonatomic, readonly) AmityPostQuerySortOption sortBy;
/// The <code>post.isDeleted</code> type to query.
@property (nonatomic, readonly) AmityQueryOption deletedOption;
/// Filter only specific <code>post.dataType</code>, specify <code>nil</code>to query all post types.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nullable filterPostTypes;
/// Create AmityPostQueryOptions instance.
/// \param targetType The target type.
///
/// \param targetId The target id.
///
/// \param sortBy The collection ordering.
///
/// \param deletedOption The <code>post.isDeleted</code> type to query.
///
/// \param filterPostTypes Filter only specific <code>post.dataType</code>, specify <code>nil</code>to query all post types.
///
- (nonnull instancetype)initWithTargetType:(AmityPostTargetType)targetType targetId:(NSString * _Nonnull)targetId sortBy:(AmityPostQuerySortOption)sortBy deletedOption:(AmityQueryOption)deletedOption filterPostTypes:(NSSet<NSString *> * _Nullable)filterPostTypes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Repository class which contains interface for creating, updating, deleting, accepting, declining post.
SWIFT_CLASS("_TtC8AmitySDK19AmityPostRepository")
@interface AmityPostRepository : NSObject
/// Initializes AmityPostRepository class.
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Creates a post.
/// \param builder Class for building post. There are various types of post builder. Use appropriate builder class for the type of post you want to create. Example: Use <code>AmityTextPostBuilder</code> to create text post.
///
/// \param targetId Id of the target where you want this post to be created. It can be userId or communityId. Set nil if you are creating a post on your own feed.
///
/// \param targetType Target type for the post.
///
/// \param completion Completion block to be called after post is created.
///
- (void)createPost:(id <AmityPostBuilder> _Nonnull)builder targetId:(NSString * _Nullable)targetId targetType:(AmityPostTargetType)targetType completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Creates a post with mentions.
/// \param builder Class for building post. There are various types of post builder. Use appropriate builder class for the type of post you want to create. Example: Use <code>AmityTextPostBuilder</code> to create text post.
///
/// \param targetId Id of the target where you want this post to be created. It can be userId or communityId. Set nil if you are creating a post on your own feed.
///
/// \param targetType Target type for the post.
///
/// \param metadata The metadata for the post, it can contain information about mentions
///
/// \param mentionees Use MentioneesBuilder class to provide mention related information
///
/// \param completion Completion block to be called after post is created.
///
- (void)createPost:(id <AmityPostBuilder> _Nonnull)builder targetId:(NSString * _Nullable)targetId targetType:(AmityPostTargetType)targetType metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Updates post with provided data
/// \param postId Id of the post to update
///
/// \param builder Class for building post. <em>Note</em> Builder should be of same type that you used to create the original post.
///
/// \param completion Completion block to be called after post is updated.
///
- (void)updatePostWithPostId:(NSString * _Nonnull)postId builder:(id <AmityPostBuilder> _Nonnull)builder completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Updates post with provided data which contains mentions.
/// \param postId Id of the post to update
///
/// \param builder Class for building post. <em>Note</em> Builder should be of same type that you used to create the original post.
///
/// \param metadata The metadata for the post. It can contain information about mentions
///
/// \param mentionees Use MentioneesBuilder class to provide mention related information
///
/// \param completion Completion block to be called after post is updated.
///
- (void)updatePostWithPostId:(NSString * _Nonnull)postId builder:(id <AmityPostBuilder> _Nonnull)builder metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Delete the post with provided id.
/// \param postId A post id represent the post object
///
/// \param parentId Id of the parent post. If a post has parent, then provide its id.
///
/// \param hardDelete If this flag is true, the SDK will delete comment from the database, instead of setting <code>isDeleted</code> flag.
/// Note: After the object is hard deleted, all the references point to the object will be invalidated. You can check this via @code object.isInvalidated @endcode
/// An attempt to access the invalidated object will result in crash. If your app keep the reference to hard deleted objects, please make sure you check against object validity
///
/// \param completion Completion block to be called after post is deleted.
///
- (void)deletePostWithPostId:(NSString * _Nonnull)postId parentId:(NSString * _Nullable)parentId hardDelete:(BOOL)hardDelete completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Approves post with provided id. To approve posts, you must have appropriate permission.
/// \param postId Id of the post to approve
///
/// \param completion Completion block to be called after post is approved
///
- (void)approvePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Declines post with provided id. To Decline post, you must have appropriate permission
/// \param postId Id of the post to decline
///
/// \param completion Completion block to be called after post is declined.
///
- (void)declinePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AmityPostRepository (SWIFT_EXTENSION(AmitySDK))
/// Retrives post for particular id
/// \param postId Id of the post
///
///
/// returns:
/// AmityObject instance for <code>AmityPost</code>.
- (AmityObject<AmityPost *> * _Nonnull)getPostForPostId:(NSString * _Nonnull)postId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of posts for provided options
/// \param options Various options for query
///
///
/// returns:
/// AmityCollection of <code>AmityPost</code>. Observe the instance for results.
- (AmityCollection<AmityPost *> * _Nonnull)getPosts:(AmityPostQueryOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Retrieves reactions for particular post
/// \param postId Id of post
///
/// \param reactionName Name of the reaction
///
///
/// returns:
/// AmityCollection of <code>AmityReaction</code> objects.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)postId reactionName:(NSString * _Nullable)reactionName SWIFT_WARN_UNUSED_RESULT;
@end


/// Topic to subscribe to events related to post. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK14AmityPostTopic")
@interface AmityPostTopic : NSObject <AmityTopic>
- (nonnull instancetype)initWithPost:(AmityPost * _Nonnull)post andEvent:(AmityPostEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Repository class which provides interface for adding, removing, querying reactions added to message, post or comments.
SWIFT_CLASS("_TtC8AmitySDK23AmityReactionRepository")
@interface AmityReactionRepository : NSObject
/// Initialize this repository
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Get list of reactions for particular content.
/// \param referenceId Id of the post, comment or message
///
/// \param type If you are adding reaction to post, reference type would be of type .post (swift) or AmityReactionReferenceTypePost (Objc)
///
/// \param reactionName Name of the reaction. If reaction name is provided, it fetches all reactions which matches the reaction name. If reaction name is empty or nil, it fetches all reactions for particular content.
///
///
/// returns:
/// Live Collection of <code>AmityReaction</code> object.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)referenceId referenceType:(AmityReactionReferenceType)type reactionName:(NSString * _Nullable)reactionName SWIFT_WARN_UNUSED_RESULT;
/// Add reaction to the content.
/// \param reaction Name of the reaction
///
/// \param contentId Id for the content. Example: postId for post, commentId for comment & so on.
///
/// \param type Type of content. If you are adding reaction to post, reference type would be of type .post (swift) or AmityReactionReferenceTypePost (Objc)
///
/// \param completion Closure to be executed after this operation is complete.
///
- (void)addReaction:(NSString * _Nonnull)reaction referenceId:(NSString * _Nonnull)contentId referenceType:(AmityReactionReferenceType)type completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes reaction from the content.
/// \param reaction Name of the reaction
///
/// \param contentId Id for the content. Example: postId for post, commentId for comment & so on.
///
/// \param type Type of content. If you are adding reaction to post, reference type would be of type .post (swift) or AmityReactionReferenceTypePost (Objc)
///
/// \param completion Closure to be executed after this operation is complete.
///
- (void)removeReaction:(NSString * _Nonnull)reaction referenceId:(NSString * _Nonnull)contentId referenceType:(AmityReactionReferenceType)type completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Regions this sdk can connect to during initialization. This can be used when initializing <code>AmityClient(_:)</code> instance
typedef SWIFT_ENUM(NSInteger, AmityRegion, open) {
/// Default region
  AmityRegionGlobal = 0,
/// Europe
  AmityRegionEU = 1,
/// Singapore
  AmityRegionSG = 2,
/// United States
  AmityRegionUS = 3,
};


SWIFT_CLASS("_TtC8AmitySDK21AmityRegionalEndpoint") SWIFT_DEPRECATED_MSG("This class will be removed in future. Please use `AmityClient(apiKey:_, region:_)` method with `AmityRegion` instead.")
@interface AmityRegionalEndpoint : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AmitySDK15AmityRoleFilter")
@interface AmityRoleFilter : NSObject
@property (nonatomic) AmityRoleFilterType filterType;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable roleIds;
/// Initializes AmityRoleFilter with AmityRoleFilterTypeOnly. A filter for receiving the particular user roles.
/// \param roleIds A set of role id the user would like to receive push notification from.
///
+ (AmityRoleFilter * _Nonnull)onlyFilterWithRoleIds:(NSArray<NSString *> * _Nonnull)roleIds SWIFT_WARN_UNUSED_RESULT;
/// Initializes EkoRoleFilter with AmityRoleFilterTypeNot. A filter for ignoring the particular user roles.
/// \param roleIds A set of role id the user would like to ignore push notification.
///
+ (AmityRoleFilter * _Nonnull)notFilterWithRoleIds:(NSArray<NSString *> * _Nonnull)roleIds SWIFT_WARN_UNUSED_RESULT;
/// Initializes AmityRoleFilter with AmityRoleFilterTypeAll. A filter for receiving any type of user roles.
+ (AmityRoleFilter * _Nonnull)allFilter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The query predicate for “getStreamsCollection”.
SWIFT_CLASS("_TtC8AmitySDK26AmityStreamCollectionQuery")
@interface AmityStreamCollectionQuery : NSObject
/// Include status as part of stream collection querying.
- (void)includeStatus:(AmityStreamStatus)status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AmityStream;

/// AmityStreamRepository class provides interfaces for dealing with live stream related objects. You can create a video stream, query list of streams, dispose stream using methods from this class.
/// note:
/// Do not subclass this class.
SWIFT_CLASS("_TtC8AmitySDK21AmityStreamRepository")
@interface AmityStreamRepository : NSObject
/// Designated intializer.
/// @param client A valid context instance.
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Create video stream
/// \param title Title of the live stream
///
/// \param description Optional description for the stream
///
/// \param thumbnailImage Thumbnail image to show for the stream.
///
/// \param meta Any additional metadata for the stream
///
/// \param completion The completion handler to be called when request is completed.
///
- (void)createVideoStreamWithTitle:(NSString * _Nonnull)title description:(NSString * _Nullable)description thumbnailImage:(AmityImageData * _Nullable)thumbnailImage meta:(NSDictionary<NSString *, id> * _Nullable)meta completion:(void (^ _Nonnull)(AmityStream * _Nullable, NSError * _Nullable))completion;
/// Ends live stream. It sends the request to update streaming status to “.ended”, and dispose streaming url.
/// \param streamId Id of the stream to dispose of
///
/// \param completion Completion handler to be called when request is complete.
///
- (void)disposeStreamWithId:(NSString * _Nonnull)streamId completion:(void (^ _Nonnull)(AmityStream * _Nullable, NSError * _Nullable))completion;
/// Get a live object of stream, by id.
/// \param streamId The unique identifer of stream
///
///
/// returns:
/// Live Object for <code>AmityStream</code> object
- (AmityObject<AmityStream *> * _Nonnull)getStreamById:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
/// Get list of streams for provided query parameters
/// \param query Query Option for streams
///
///
/// returns:
/// Live Collection of <code>AmityStream</code> object
- (AmityCollection<AmityStream *> * _Nonnull)getStreamsCollectionFrom:(AmityStreamCollectionQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class which provides interface to create post of type <code>text</code>.
SWIFT_CLASS("_TtC8AmitySDK20AmityTextPostBuilder")
@interface AmityTextPostBuilder : NSObject <AmityPostBuilder>
/// Sets current text as provided text
/// \param text Text for the post
///
- (void)setText:(NSString * _Nonnull)text;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class provides interface to subscribe to real time event topics.
SWIFT_CLASS("_TtC8AmitySDK22AmityTopicSubscription")
@interface AmityTopicSubscription : NSObject
/// Initializes instance of this class
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Subscribes to particular topic.
/// \param topic Topic to subscribe. There are 4 topics that you can subscribe. <code>AmityUserTopic</code>,<code>AmityPostTopic</code>,<code>AmityCommunityTopic</code>,<code>AmityCommentTopic</code>. Each topic can contain one or more events that you can subscribe to. Please look into documentation of respective topic for more details.
///
/// \param completion Completion handler called when this action is successful or fails.
///
- (void)subscribeTopic:(id <AmityTopic> _Nonnull)topic withCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Unsubscribes from particular topic.
/// \param topic Topic to unsubscribe from.
///
/// \param completion Completion handler to be called when this action succeeds or fails.
///
- (void)unsubscribeTopic:(id <AmityTopic> _Nonnull)topic withCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class to represent the file that is being uploaded.
SWIFT_CLASS("_TtC8AmitySDK19AmityUploadableFile")
@interface AmityUploadableFile : NSObject
/// Identifier which uniquely identifies this file.
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// Data representing actual File.
@property (nonatomic, copy) NSData * _Nonnull fileData;
/// Name of the file being uploaded. Example: my-awesome-file.pdf.
/// Extension will be automatically extracted from your File Name
@property (nonatomic, copy) NSString * _Nullable fileName;
/// MimeType of the file being uploaded. Default value is “application/octet-stream”
@property (nonatomic, copy) NSString * _Nonnull mimeType;
/// Any metadata associated with the file. Right now its ignored
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull metaData;
/// Initializes the instance for this class.
- (nonnull instancetype)initWithFileData:(NSData * _Nonnull)fileData fileName:(NSString * _Nullable)fileName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for handling flag, unflag and isFlaggedByMe operation. This class reference must be stored strongly until its operation is complete.
SWIFT_CLASS("_TtC8AmitySDK16AmityUserFlagger")
@interface AmityUserFlagger : NSObject
/// Initializes user flagger class
/// \param client Valid AmityClient instance
///
/// \param userId Id of the user that you want to flag
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
/// Flags user with given id
/// \param completion Closure to be executed after request is completed.
///
- (void)flagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags user with given id
/// \param completion Closure to be executed after request is completed
///
- (void)unflagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether this user is flagged by currently logged in user or not
/// \param completion Completion block to be called after request is completed. Returns true if user is flagged by you else provides false.
///
- (void)isFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityMyFollowInfo;
@class AmityUserFollowInfo;

/// Class providing interfaces to follow, unfollow, accept, decline user requests etc.
SWIFT_CLASS("_TtC8AmitySDK22AmityUserFollowManager")
@interface AmityUserFollowManager : NSObject
/// Initializes this class.
/// \param client A valid context instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Create a follow request to the particular user
/// \param userId The id of user we are sending the request to.
///
/// \param completion A block executed when this request is complete.
///
- (void)followUserWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Cancel a pending request or unfollow the particular user
/// \param userId The id of user we want to unfollow or withdraw a pending request.
///
/// \param completion A block executed when this request is complete.
///
- (void)unfollowUserWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Accept an incoming request of a particular user
/// \param userId The id of user we want to accept a request.
///
/// \param completion A block executed when this request is complete.
///
- (void)acceptUserRequestWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Decline an incoming request of a particular user or remove the follower
/// \param userId The id of user we want decline a request.
///
/// \param completion A block executed when this request is complete.
///
- (void)declineUserRequestWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Get my follow information in order to see following count, follower count and pending count
/// \param completion Block executed when this request is complete.
///
- (void)getMyFollowInfoWithCompletion:(void (^ _Nonnull)(BOOL, AmityMyFollowInfo * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use getMyFollowInfo api which returns AmityObject<AmityMyFollowInfo> instead.");
/// Get particular user’s follow information in order to see following count, follower count and relation status
/// \param userId Id of the user
///
/// \param completion Block to be executed when request is complete.
///
- (void)getUserFollowInfoWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nonnull)(BOOL, AmityUserFollowInfo * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use getUserFollowInfo api which returns AmityObject<AmityUserFollowInfo> instead.");
/// Removes stale follow relationship data
- (void)clearAmityFollowRelationshipLocalData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityFollowRelationship;

@interface AmityUserFollowManager (SWIFT_EXTENSION(AmitySDK))
/// Fetches follow information such as following count, follower count and pending count & returns as Live Object.
///
/// returns:
/// Returns LiveObject for <code>AmityMyFollowInfo</code> object.
- (AmityObject<AmityMyFollowInfo *> * _Nonnull)getMyFollowInfo SWIFT_WARN_UNUSED_RESULT;
/// Fetches particular user’s follow information in order to see following count, follower count and relation status as Live Object.
/// \param userId Id of user
///
///
/// returns:
/// LiveObject for <code>AmityUserFollowInfo</code> object.
- (AmityObject<AmityUserFollowInfo *> * _Nonnull)getUserFollowInfoWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of relationships of users who follows you.
/// \param option Query options
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getMyFollowerListWith:(AmityFollowQueryOption)option SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of relationships whom you follow.
/// \param option Query Options.
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getMyFollowingListWith:(AmityFollowQueryOption)option SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of users who follows this user.
/// \param userId Id of the user whose relationship is to be fetched.
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object.
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getUserFollowerListWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of user relationships whom this user follows.
/// \param userId Id of the user whose relationship is to be fetched.
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object.
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getUserFollowingListWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
@end


/// Class responsible for configuring notification settings for user for particular module.
SWIFT_CLASS("_TtC8AmitySDK27AmityUserNotificationModule")
@interface AmityUserNotificationModule : NSObject
@property (nonatomic, readonly) AmityNotificationModuleType moduleType;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly, strong) AmityRoleFilter * _Nullable roleFilter;
/// Initializes module for push notification settings
/// \param moduleType Type of module
///
/// \param isEnabled Whether user would like to receive push notifications for particular module
///
/// \param roleFilter (optional) A filter for determining which user role that the user would like to receive notification from. If nil provided, skip updating roles.
///
- (nonnull instancetype)initWithModuleType:(AmityNotificationModuleType)moduleType isEnabled:(BOOL)isEnabled roleFilter:(AmityRoleFilter * _Nullable)roleFilter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Instance of current notification settings for user.
SWIFT_CLASS("_TtC8AmitySDK29AmityUserNotificationSettings")
@interface AmityUserNotificationSettings : NSObject
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly, copy) NSArray<AmityUserNotificationModule *> * _Nonnull modules;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for managing notifications for user in different module.
SWIFT_CLASS("_TtC8AmitySDK29AmityUserNotificationsManager")
@interface AmityUserNotificationsManager : NSObject
/// Initialize notification manager instance
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Enable user level push notification settings.
/// note:
/// This setting will take effect on every device used by the user.
/// \param modules An array of modules that consists of <code>chat</code>, <code>social</code> and <code>video-streaming</code>.
///
/// \param completion A block executed when the request has completed
///
- (void)enableFor:(NSArray<AmityUserNotificationModule *> * _Nullable)modules completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Disable user level push notification settings.
/// note:
/// This setting will take effect on every device used by the user.
/// \param completion A block executed when the request has completed.
///
- (void)disableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Retrieve the user level push notification settings.
/// note:
/// This setting is per user, not per device.
/// \param completion A block executed when the request has completed.
///
- (void)getSettingsWithCompletion:(void (^ _Nullable)(AmityUserNotificationSettings * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides interface related to user. You can query or search user using this Repository class.
SWIFT_CLASS("_TtC8AmitySDK19AmityUserRepository")
@interface AmityUserRepository : NSObject
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
@property (nonatomic, readonly, strong) AmityUserFollowManager * _Nonnull followManager;
/// Initializer
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Fetches <code>AmityUser</code> live object for provided id.
/// \param userId Id of the user
///
///
/// returns:
/// AmityObject of AmityUser
- (AmityObject<AmityUser *> * _Nonnull)getUser:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Search users based on display name
/// \param displayName The display name of the user we want to search
///
/// \param sortBy The sort option provided by <code>AmityUserSortOption</code>
///
///
/// returns:
/// Returns <code>AmityCollection</code> of all users which matches the search query
- (AmityCollection<AmityUser *> * _Nonnull)searchUser:(NSString * _Nonnull)displayName sortBy:(AmityUserSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
/// Returns all available users
/// \param sortBy The sort option provided by <code>AmityUserSortOption</code>
///
///
/// returns:
/// Returns <code>AmityCollection</code> of all users.
- (AmityCollection<AmityUser *> * _Nonnull)getUsers:(AmityUserSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
+ (void)setupRealTimeEventWithClient:(AmityClient * _Nonnull)client;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Topic to subscribe to events related to user. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK14AmityUserTopic")
@interface AmityUserTopic : NSObject <AmityTopic>
- (nonnull instancetype)initWithUser:(AmityUser * _Nonnull)user andEvent:(AmityUserEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class for updating current user information.
SWIFT_CLASS("_TtC8AmitySDK22AmityUserUpdateBuilder")
@interface AmityUserUpdateBuilder : NSObject
/// Set display name for current user
/// \param name Display name to set. If you want to remove assigned display name, pass param nil or empty.
///
- (void)setDisplayName:(NSString * _Nullable)name;
/// Sets description for current user
/// \param description Description for the user.
///
- (void)setUserDescription:(NSString * _Nonnull)description;
/// Sets metadata for current user
/// \param metadata Dictionary containing metadata
///
- (void)setUserMetadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Sets custom url as an avatar url. This is useful if you want to assign the existing
/// avatar url as an avatar url.
/// You can only use this either this method or <code>setAvatar</code> for updating avatar. If both method
/// are used, then this method will be given priority and <code>setAvatar</code> input will be
/// discarded.
/// \param customURL Custom URL of the avatar to be assigned. If you want to remove
/// assigned url, set this parameter to nil.
///
- (void)setAvatarCustomUrl:(NSString * _Nullable)customURL;
/// Sets avatar for this user. Image for this avatar should be uploaded first using
/// <code>AmityFileRepository</code> and the <code>AmityImageData</code> returned upon completion should
/// be set as a parameter.
/// You can only use this either this method or <code>setAvatarCustomUrl</code> for updating avatar. If both method
/// are used, then <code>setAvatarCustomUrl</code> will be given priority and input from this method will be
/// discarded.
/// \param avatar <code>AmityImageData</code> returned upon successful upload of image using
/// <code>AmityFileRepository</code>. If you want to remove avatar, set this parameter to nil.
///
- (void)setAvatar:(AmityImageData * _Nullable)avatar;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class containing information about uploaded video. This class is not meant to be subclassed and
/// its instance is not made to be created by user. Please use the instance of this class returned by sdk.
SWIFT_CLASS("_TtC8AmitySDK14AmityVideoData")
@interface AmityVideoData : NSObject
/// Id of the video file
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// URL of the file. This url can be used for downloading file.
@property (nonatomic, copy) NSString * _Nonnull fileURL;
/// Additional attributes attached with this file
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Initializes file data from server response.
- (nonnull instancetype)initWithResponse:(NSDictionary<NSString *, id> * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Initializes file data.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (NSString * _Nonnull)getStringValue:(enum AmityVideoDataQuality)quality SWIFT_WARN_UNUSED_RESULT;
@end

/// Quality of uploaded AmityVideo
typedef SWIFT_ENUM(NSInteger, AmityVideoDataQuality, open) {
  AmityVideoDataQualityOriginal = 0,
  AmityVideoDataQualityHigh = 1,
  AmityVideoDataQualityMedium = 2,
  AmityVideoDataQualityLow = 3,
};


/// Builder class which provides interface to create post of type <code>video</code>.
SWIFT_CLASS("_TtC8AmitySDK21AmityVideoPostBuilder")
@interface AmityVideoPostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSDate;

@interface NSDateFormatter (SWIFT_EXTENSION(AmitySDK))
+ (NSDate * _Nullable)ekoDateFromISO8601String:(NSString * _Nullable)dateString SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS("_TtC8AmitySDK12EkoFileModel")
@interface EkoFileModel : EkoRealmModel
@property (nonatomic, copy) NSString * _Nonnull fileId;
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSData * _Nullable attributes;
@property (nonatomic, copy) NSString * _Nonnull feedType;
@property (nonatomic, copy) NSString * _Nonnull status;
@property (nonatomic, copy) NSData * _Nullable videoUrl;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary * _Nullable)defaultPropertyValues SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)ekoCreateOrUpdateInRealm:(RLMRealm * _Nonnull)realm withJSON:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (AmityFileData * _Nonnull)mapToFileData SWIFT_WARN_UNUSED_RESULT;
- (AmityImageData * _Nonnull)mapToImageData SWIFT_WARN_UNUSED_RESULT;
- (AmityVideoData * _Nonnull)mapToVideoData SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)extractAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AmitySDK17EkoNetworkRequest")
@interface EkoNetworkRequest : NSObject
/// Initialize RPC Request.
/// \param endpoint Rpc Endpoint
///
/// \param params Request Parameters
///
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint params:(NSDictionary<NSString *, id> * _Nullable)params OBJC_DESIGNATED_INITIALIZER;
/// Initialize Http Request.
/// \param endpoint Http Endpoint
///
/// \param params Request Parameters
///
/// \param method Request Method
///
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint params:(NSDictionary<NSString *, id> * _Nullable)params method:(ASCHttpMethod)method OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface EkoNetworkRequest (SWIFT_EXTENSION(AmitySDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end










@interface NSKeyedUnarchiver (SWIFT_EXTENSION(AmitySDK))
+ (id _Nullable)ekoUnarchivedObjectFromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end







SWIFT_CLASS("_TtC8AmitySDK15ObserverManager")
@interface ObserverManager : NSObject
- (void)trackLiveCollection:(AmityCollection<id> * _Nonnull)liveCollection;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@protocol NSFastEnumeration;

@interface RLMRealm (SWIFT_EXTENSION(AmitySDK))
- (void)ekoTransactionWithBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block;
- (void)ekoHardDeleteObject:(EkoRealmModel * _Nonnull)object objectId:(NSString * _Nonnull)objectId objectType:(NSString * _Nonnull)objectType;
- (void)ekoHardDeleteObjects:(id <NSFastEnumeration> _Nonnull)objects objectIds:(NSArray<NSString *> * _Nonnull)objectIds objectType:(NSString * _Nonnull)objectType;
@end





#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef AMITYSDK_SWIFT_H
#define AMITYSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import Realm;
#endif

#import <AmitySDK/AmitySDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AmitySDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Internal class to represent sdk error. Do not use this class directly.
SWIFT_CLASS("_TtC8AmitySDK8ASCError")
@interface ASCError : NSObject
/// Returns an instance of NSError with domain, code and userInfo constructed from response
@property (nonatomic, readonly) NSError * _Nonnull error;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message code:(AmityErrorCode)code OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message errorCode:(NSInteger)code OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EkoNetworkRequest;
@class ASCNetworkRequestToken;

SWIFT_CLASS("_TtC8AmitySDK21ASCNetworkCoordinator")
@interface ASCNetworkCoordinator : NSObject
/// Creates a retryable request and adds it to the queue. Request is
/// retried incase of specific failure & as long as the ASCNetworkRequestToken is retained.
/// Note: Requests made through live object or live collection are always
/// retryable requests.
- (ASCNetworkRequestToken * _Nonnull)beginRetryableRequest:(EkoNetworkRequest * _Nonnull)request completion:(void (^ _Nonnull)(EkoNetworkRequest * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Creates a request & execute it immediately. Request is not retried.
- (void)beginRequest:(EkoNetworkRequest * _Nonnull)request completion:(void (^ _Nullable)(EkoNetworkRequest * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completion;
/// Binds event with socket connection.
- (void)bind:(NSString * _Nonnull)event withResponder:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable))withResponder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8AmitySDK22ASCNetworkRequestToken")
@interface ASCNetworkRequestToken : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AmitySDK8ASCUtils")
@interface ASCUtils : NSObject
+ (NSString * _Nonnull)convertArrayToString:(NSArray<NSString *> * _Nonnull)array withSeparator:(NSString * _Nonnull)separator SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)convertStringToArrayWithString:(NSString * _Nonnull)string withSeparator:(NSString * _Nonnull)separator SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)valueForFeedType:(AmityFeedType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocols used for builder used in sdk. Use one of the concrete classes instead.
SWIFT_PROTOCOL("_TtP8AmitySDK12AmityBuilder_")
@protocol AmityBuilder <NSObject>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// Builder protocol for Channel
SWIFT_PROTOCOL("_TtP8AmitySDK27AmityChannelBuilderProtocol_")
@protocol AmityChannelBuilderProtocol <AmityBuilder>
@property (nonatomic) AmityChannelType channelType;
@end


/// The builder class for channel membership filter.
SWIFT_CLASS("_TtC8AmitySDK35AmityChannelMembershipFilterBuilder")
@interface AmityChannelMembershipFilterBuilder : NSObject
/// Adds <code>AmityChannelMembershipSearchFilter</code> type to the builder.
/// If there is no value added by default builder will take value <code>AmityChannelMembershipSearchFilterMember</code>.
- (void)addWithFilter:(AmityChannelMembershipSearchFilter)filter;
/// Returns string description for particular filter option.
- (NSString * _Nonnull)getStringValueForFilter:(AmityChannelMembershipSearchFilter)filter SWIFT_WARN_UNUSED_RESULT;
/// Converts provided value to <code>AmityChannelMembershipSearchFilter</code> enum.
/// \param value String value for filter
///
///
/// returns:
/// returns <code>AmityChannelMembershipSearchFilter</code> case if value matches. Else returns <code>.member</code>
- (AmityChannelMembershipSearchFilter)getFilterForString:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Returns array of filters added.
- (NSArray<NSString *> * _Nonnull)getAllFilters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AmityClient;

/// Class for moderating channels. It contains interface for actions such as banning members, muting members etc.
SWIFT_CLASS("_TtC8AmitySDK22AmityChannelModeration")
@interface AmityChannelModeration : NSObject
/// Initializes Channel Moderation class.
/// \param client Valid <code>AmityClient</code> instance
///
/// \param channel Id of the channel
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andChannel:(NSString * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
/// Mute users in channel
/// \param userIds Id of users to mute
///
/// \param mutePeriodInSeconds Time duration to mute (in seconds)
///
/// \param completion Block to be executed when request is completed.
///
- (void)muteMembers:(NSArray<NSString *> * _Nonnull)userIds mutePeriod:(NSUInteger)mutePeriodInSeconds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unmute users in channel
/// \param userIds Id of users to unmute
///
/// \param completion Block to be executed when request is completed
///
- (void)unmuteMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Ban Members from channel
/// \param userIds Id of users to ban
///
/// \param completion Block to be executed when request is completed
///
- (void)banMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// UnBan users from channel
/// \param userIds If of users to unban
///
/// \param completion Block to be executed when request is completed
///
- (void)unbanMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Assign role to user
/// \param role Role to be assigned
///
/// \param userIds Id of users to whom role is to be assigned
///
/// \param completion Block to be executed when request is completed
///
- (void)addRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Remove assigned roles from user
/// \param role Role to be un-assigned
///
/// \param userIds Id of users from whom role is to be un-assigned
///
/// \param completion Block to be executed when request is completed
///
- (void)removeRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Notification settings for channel.
SWIFT_CLASS("_TtC8AmitySDK32AmityChannelNotificationSettings")
@interface AmityChannelNotificationSettings : NSObject
/// If notifications is enabled for the channel
@property (nonatomic) BOOL isEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for managing notifications related to channel.
SWIFT_CLASS("_TtC8AmitySDK32AmityChannelNotificationsManager")
@interface AmityChannelNotificationsManager : NSObject
/// Initializes Notification Manager class
/// \param client Valid <code>AmityClient</code> instance
///
/// \param channelId Id of the channel.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client channelId:(NSString * _Nonnull)channelId OBJC_DESIGNATED_INITIALIZER;
/// Enables the channel level push notification setting.
/// This setting will take effect on every device used by the user.
/// \param completion A block executed when the request has completed.
///
- (void)enableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Disables the channel level push notification setting.
/// This setting will take effect on every device used by the user.
/// \param completion A block executed when the request has completed.
///
- (void)disableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Retrieve the current channel level push notification state.
/// This setting is per user, not per device.
/// \param completion A block executed when the request has completed.
///
- (void)getSettingsWithCompletion:(void (^ _Nonnull)(AmityChannelNotificationSettings * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityChannelMember;

/// Class providing interface for managing participants of channels such as adding members, removing members, querying members etc.
SWIFT_CLASS("_TtC8AmitySDK25AmityChannelParticipation")
@interface AmityChannelParticipation : NSObject
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
@property (nonatomic, readonly, copy) NSString * _Nonnull channelId;
/// Initailizes Channel Participation class
/// \param client Valid <code>AmityClient</code> instance
///
/// \param channel Id of the channel
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andChannel:(NSString * _Nonnull)channel OBJC_DESIGNATED_INITIALIZER;
/// Adds user to the channel
/// \param userIds Id of users to add
///
/// \param completion Block to be executed when request is completed.
///
- (void)addMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes user from channel
/// \param userIds Id of users to remove
///
/// \param completion Block to be executed when request is completed.
///
- (void)removeMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Let the server know that the user is currently viewing this channel (this automatically updates the user’s readToSegment and lastMentionedSegmentt)
/// A user can read multiple channels at the same time.
- (void)startReading;
/// Let the server know that the user has stopped reading this channel (this automatically updates the user’s readToSegment and lastMentionedSegment)
- (void)stopReading;
/// Get members for this channel filtered by provided parameter.
/// \param filter Option to filter channel members
///
/// \param sortBy Sort option for member list
///
/// \param roles Filter member list by roles. If you don’t want to filter by role, pass empty array
///
///
/// returns:
/// Live collection of <code>AmityChannelMember</code> object
- (AmityCollection<AmityChannelMember *> * _Nonnull)getMembersWithFilter:(AmityChannelMembershipFilter)filter sortBy:(AmitySortBy)sortBy roles:(NSArray<NSString *> * _Nonnull)roles SWIFT_WARN_UNUSED_RESULT;
/// Search for member in this channel
/// \param displayName Display Name as a search keyword
///
/// \param filterBuilder Builder class to create filter options
///
/// \param roles Filter membership list by roles. If you don’t want to filter by role, pass empty array
///
///
/// returns:
/// Live Collection of <code>AmityChannelMember</code> object
- (AmityCollection<AmityChannelMember *> * _Nonnull)searchMembersWithDisplayName:(NSString * _Nonnull)displayName filterBuilder:(AmityChannelMembershipFilterBuilder * _Nonnull)filterBuilder roles:(NSArray<NSString *> * _Nonnull)roles SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Builder class for constructing parameters for channel query
SWIFT_CLASS("_TtC8AmitySDK17AmityChannelQuery")
@interface AmityChannelQuery : NSObject
/// Channel types to query
/// All the channel types can be found at <code>AmityChannelQueryType</code> class. For example,
/// @code
/// let query = AmityChannelQuery()
/// query.types = [AmityChannelQueryType.community, AmityChannelQueryType.live]
/// @endcode
/// The default value is an empty set, meaning that the query will include all channel types..
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull types;
/// Filtering by member status
/// The default value is <code>.all</code>.
@property (nonatomic) AmityChannelQueryFilter filter;
/// Filter channels that contain all the <code>includingTags</code> tags in itself.
/// Specify an empty arary to ignore this filter.
/// The default value is an empty array.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull includingTags;
/// Filter channels that do not contain all the <code>excludingTags</code> in itself.
/// Specify an empty arary to ignore this filter.
/// The default value is an empty array.
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull excludingTags;
/// Whether or not the query should return deleted channels.
/// Specify <code>true</code> to include deleted channels, <code>false</code> to not include deleted channels.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL includeDeleted;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Types of channel which can be queried
SWIFT_CLASS("_TtC8AmitySDK21AmityChannelQueryType")
@interface AmityChannelQueryType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull standard;)
+ (NSString * _Nonnull)standard SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy, getter=private) NSString * _Nonnull private_;)
+ (NSString * _Nonnull)private SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull broadcast;)
+ (NSString * _Nonnull)broadcast SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull conversation;)
+ (NSString * _Nonnull)conversation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull live;)
+ (NSString * _Nonnull)live SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull community;)
+ (NSString * _Nonnull)community SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityChannel;
@class AmityChannelUpdateBuilder;

/// Repository class for Channel. This class provides interface for creating, updating, joining, querying channels etc.
SWIFT_CLASS("_TtC8AmitySDK22AmityChannelRepository")
@interface AmityChannelRepository : NSObject
/// Valid client instance
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Total number of messages unread by user for this channel. Do not set this property directly.
@property (nonatomic) NSUInteger totalUnreadCount;
/// Initializes AmityChannelRepository class.
/// \param client Valid <code>AmityClient</code> instance.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Returns channel notification management object.
/// \param channelId Id of the channel
///
///
/// returns:
/// Returns instance of <code>AmityChannelNotificationsManager</code>
- (AmityChannelNotificationsManager * _Nonnull)notificationManagerForChannelWithId:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
/// Leaves current channel.
/// You cannot leave a conversation channel. Doing so would throw error.
/// \param channelId Id of the channel to leave
///
/// \param completion Block to be executed when request is completed.
///
- (void)leaveChannel:(NSString * _Nonnull)channelId withCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use `func leaveChannel(channelId:) async throws -> Void` instead.");
/// Creates a new channel. <em>Standard & Private</em> channel types has been depreciated. Please refer to our documentation for more info
/// \param builder Builder classes for channel. Each channnel types has its own builder class. Example: <code>AmityLiveChannelBuilder</code>
///
///
/// returns:
/// Returns live object for <code>AmityChannel</code> object
- (AmityObject<AmityChannel *> * _Nonnull)createChannelWith:(id <AmityChannelBuilderProtocol> _Nonnull)builder SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func createChannel(with:) async throws -> Void` instead.");
/// Updates existing channel.
/// \param builder Builder class for channel update.
///
///
/// returns:
/// Returns live object for <code>AmityChannel</code> object.
- (AmityObject<AmityChannel *> * _Nonnull)updateChannelWith:(AmityChannelUpdateBuilder * _Nonnull)builder SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func updateChannel(with:) async throws -> Void` instead.");
/// Join a channel with given id. If you have previously joined this channel and you are currently member of this channel, then this method will fetch existing channel.
/// note:
/// Starting from SDK version 3.0, If channel does not exists, this method will not create a new channel. You don’t need to join a conversation channel. Doing so would throw error.
/// \param channelId Valid id of channel
///
///
/// returns:
/// Live object for <code>AmityChannel</code> object
- (AmityObject<AmityChannel *> * _Nonnull)joinChannel:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use `func joinChannel(channelId:) async throws -> Void` instead.");
/// Returns exsiting channel with given id.
/// \param channelId Valid if of channel.
///
///
/// returns:
/// Live object for <code>AmityChannel</code> object
- (AmityObject<AmityChannel *> * _Nonnull)getChannel:(NSString * _Nonnull)channelId SWIFT_WARN_UNUSED_RESULT;
/// Get list of channels with provided query options
/// \param query Query Options for fetching channels
///
///
/// returns:
/// Live Collection of <code>AmityChannel</code> object
- (AmityCollection<AmityChannel *> * _Nonnull)getChannelsWith:(AmityChannelQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AmityChannelRepository (SWIFT_EXTENSION(AmitySDK))
/// Join a channel with given ID. If you have previously joined this channel and you are currently member of this channel, then this method will return existing channel.
/// note:
/// Starting from SDK version 3.0, If channel does not exists, this method will not create a new channel. You don’t need to join a conversation channel. Doing so would throw error.
/// \param channelId Valid channel id.
///
///
/// returns:
/// Joined channel if successful. Else throws error
- (void)joinChannelWithChannelId:(NSString * _Nonnull)channelId completionHandler:(void (^ _Nonnull)(AmityChannel * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
/// Creates a new channel. Please refer to our documentation for more info
/// \param builder Builder classes for channel. Each channnel types has its own builder class. Example: <code>AmityLiveChannelBuilder</code>
///
///
/// returns:
/// Returns newly created channel if successful. Else returns false.
- (void)createChannelWith:(id <AmityChannelBuilderProtocol> _Nonnull)builder completionHandler:(void (^ _Nonnull)(AmityChannel * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
/// Updates the channel. Use AmityChannelUpdateBuilder class to create your update.
/// \param builder Builder for constructing channel updates.
///
///
/// returns:
/// Returns AmityChannel if update is successful. Else throws error
- (void)updateChannelWith:(AmityChannelUpdateBuilder * _Nonnull)builder completionHandler:(void (^ _Nonnull)(AmityChannel * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
/// Leaves channel with provided Id. Leaving a channel would change your membership status to none
/// You cannot leave a conversation channel. Doing so would throw error.
/// \param channelId Id of the channel
///
///
/// returns:
/// Returns Void. Throws incase of error.
- (void)leaveChannelWithChannelId:(NSString * _Nonnull)channelId completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=13.0.0);
@end


@class AmityImageData;

/// Builder to update the channel. All methods are optional.
SWIFT_CLASS("_TtC8AmitySDK25AmityChannelUpdateBuilder")
@interface AmityChannelUpdateBuilder : NSObject
@property (nonatomic, copy) NSString * _Nonnull channelId;
/// Default initializer.
- (nonnull instancetype)initWithChannelId:(NSString * _Nonnull)channelId OBJC_DESIGNATED_INITIALIZER;
/// Sets display name for channel. Default value is nil.
- (void)setDisplayName:(NSString * _Nonnull)displayName;
/// Sets medata for the channel. Default is empty dictionary.
- (void)setMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
/// Sets avatar info for this channel. Use AmityFileRepository to upload image and set the AmityImageData
/// instance that you get in response over here. To remove the avatar, pass nil.
- (void)setAvatar:(AmityImageData * _Nullable)avatarData;
/// Sets tags for channel. Default is empty array
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class ObserverManager;
@class RLMRealm;
@protocol AmityClientDelegate;
@protocol AmityClientErrorDelegate;
enum AmityConnectionStatus : NSInteger;
@class AmityUser;
@class AmityUserNotificationsManager;
@class AmityMentionConfigurations;
enum AmityRegion : NSInteger;
@class AmityEndpoint;
@class AmityUserUpdateBuilder;

/// Entry class for sdk. <code>AmityClient</code> instance initializes sdk and is needed for further interaction with the sdk.
/// Though multiple instance of <code>AmityClient</code> can be created, we don’t recommend it. A single valid instance of <code>AmityClient</code> should be create and retained as long as you want to interact with sdk.
SWIFT_CLASS("_TtC8AmitySDK11AmityClient")
@interface AmityClient : NSObject
@property (nonatomic, readonly, strong) ObserverManager * _Nonnull observerManager;
@property (nonatomic, strong) ASCNetworkCoordinator * _Nonnull coordinator;
@property (nonatomic, readonly, strong) RLMRealm * _Nonnull dataRealm;
/// You can implement this delegate to listen to various sdk events
/// such as bad session, global ban, connection status changes etc.
@property (nonatomic, weak) id <AmityClientDelegate> _Nullable delegate;
@property (nonatomic, weak) id <AmityClientErrorDelegate> _Nullable clientErrorDelegate SWIFT_DEPRECATED_MSG("This property will be removed in the future. Please use `delegate` property instead.");
/// Current connection status for SDK. This property supports KVO currently but we recommend to use <code>didChangeConnectionStatus:</code> method from <code>AmityClientDelegate</code>. KVO observation for this property will be removed in future.
@property (nonatomic) enum AmityConnectionStatus connectionStatus SWIFT_DEPRECATED_MSG("This property will be removed in the future.");
/// Id of the current user.
@property (nonatomic, readonly, copy) NSString * _Nullable currentUserId;
/// Current User live object
@property (nonatomic, readonly, strong) AmityObject<AmityUser *> * _Nullable currentUser;
/// User level notification management object
@property (nonatomic, strong) AmityUserNotificationsManager * _Nonnull notificationManager;
/// This object contains configuration related to mention in chat
@property (nonatomic, readonly, strong) AmityMentionConfigurations * _Nullable mentionConfigurations;
/// Creates an instance of <code>AmityClient</code> with provided API key. By default, this method uses .global region configuration
/// \param apiKey ApiKey provided by Amity
///
/// \param region The region to which this sdk connects to.
///
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey region:(enum AmityRegion)region error:(NSError * _Nullable * _Nullable)error;
/// Creates an instance of <code>AmityClient</code> with provided API Key.
/// Use this method only if you need extra configuration.
/// If you don’t need extra configuration use <code>init(apiKey:_, region:_)</code> method instead.
/// \param apiKey ApiKey provided by Amity
///
/// \param endpoint mityEndpoint instance which provides configuration for various url
///
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey endpoint:(AmityEndpoint * _Nonnull)endpoint error:(NSError * _Nullable * _Nullable)error;
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey httpUrl:(NSString * _Nonnull)httpUrl socketUrl:(NSString * _Nonnull)socketUrl error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("This method will be removed in future. Please use `init(apiKey:_, region:_)` or `init(apiKey:_, endpoint:_)` instead");
- (nullable instancetype)initWithApiKey:(NSString * _Nonnull)apiKey url:(NSString * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("This method will be removed in future. Please use `init(apiKey:_, region:_)` or `init(apiKey:_, endpoint:_)` instead");
/// Connect the SDK to the server, and activate the current session with <code>userId</code>. The system will create a new user, if <code>userId</code> does not exist.
/// AmitySDK supports one user session at a time. If <code>userId</code> is different than the current session, the SDK automatically logout the current session before starting the new one. To properly logout, please use the counterpart <code>client.logout()</code>.
/// The SDK  provides local caches that are bound to the session. When the session is destroyed, the SDK also purge all local caches
/// If display name is nil, then user id would be set as display name. You can update it later using <code>updateUser:</code> method.
/// Error occurred in this method will not be delivered through <code>clientErrorDelegate</code>. Please observe it using completion handler instead.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: Id of the user
///   </li>
///   <li>
///     displayName: Display name of the user. If display name is nil or empty, user id would be used as display name.
///   </li>
///   <li>
///     authToken: Extra authentication token to be used for secure device registration. This is optional. Please refer to our Authentication documentation for further details.
///   </li>
///   <li>
///     completion: Completion handler to be called when device registration is successful or failed.
///   </li>
/// </ul>
- (void)loginWithUserId:(NSString * _Nonnull)userId displayName:(NSString * _Nullable)displayName authToken:(NSString * _Nullable)authToken completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("This login (+completion) will be removed in the future, please use [login(...) async throws] instead.");
/// Disconnect from the server without logging out the user.
/// This function does not destroy the current user session. The SDK connection can be resumed, by calling <code>.login(...)</code> with the current userId.
- (void)disconnect;
/// Disconnect from the server, and destroys the current user session. The SDK will delete all the local caches. Once this method is called, the only way to re-establish connection is to call <code>login</code> method again.
/// <ul>
///   <li>
///     The SDK will disconnect from the server immediately, the operation happens synchronously on the client side.
///   </li>
///   <li>
///     The SDK will unregister push notifications of this device.
///   </li>
/// </ul>
- (void)logout;
- (void)ekoAsyncBackgroundRealmTransaction:(void (^ _Nonnull)(RLMRealm * _Nonnull))block;
/// Register the current device (and the current logged-in user) to receive
/// push notifications.
/// You can call this method as many times as you’d like: the last call
/// will always override any precedent state.
/// As long as you call this function with a valid token, and after succesfully
/// registering the SDK, you’re guaranteed to receive only push notifications related
/// to the current logged in user.
/// Succesfully calling this method will override any precedent state: if this device
/// was previously registered with a different user, the device will no more get any
/// notification related to that user.
/// Call <code>unregisterDeviceForPushNotificationForUserId:completion:</code> to stop receiving
/// notifications for this user.
/// warning:
/// Once succesfully registered, this app will continue to receive
/// notifications related to this user until the <code>unregisterDeviceForPushWithCompletion:</code>
/// or another registration is made.
/// \param token A globally unique token that identifies this device to Apple
/// Push Notification service
///
/// \param completion A block executed when the request has successfully completed.
///
- (void)registerDeviceForPushNotificationWithDeviceToken:(NSString * _Nonnull)token completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unregister the current device to stop receiving any push notifications
/// related to the given user userId. If no user is passed, the backend will remove
/// any push notification token associated with this device.
/// Call this method when you no longer wish to receive notifications for
/// the previously registered user (for example when the user logs out).
/// warning:
/// Make sure that the completion block is called with success state, otherwise
/// the Amity backend will keep sending push notifications related to the previous user.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     userId: The userId of the user of which the SDK should no longer receive notifications.
///   </li>
///   <li>
///     completion: A block executed when the request has successfully completed.
///   </li>
/// </ul>
- (void)unregisterDeviceForPushNotificationForUserId:(NSString * _Nullable)userId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (void)updateUser:(AmityUserUpdateBuilder * _Nonnull)builder completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (NSDictionary<NSString *, id> * _Nullable)sendCustomCommandWithCommand:(NSString * _Nonnull)command SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface AmityClient (SWIFT_EXTENSION(AmitySDK))
/// Checks whether the current user has permission or not.
/// \param permission Permission to check
///
/// \param completion Completion handler with boolean which returns True if permission is granted else returns False
///
- (void)hasPermission:(AmityPermission)permission completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks whether the current user has permission inside particular channel. This method checks for permission in global level as well as channel level.
/// \param permission Permission to check
///
/// \param channelId Id of the channel to check for
///
/// \param completion Completion handler with boolean which returns True if permission is granted else returns False
///
- (void)hasPermission:(AmityPermission)permission forChannel:(NSString * _Nonnull)channelId completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks whether the current user has permission inside particular channel. This method checks for permission in global level as well as channel level.
/// \param permission Permission to check
///
/// \param communityId Id of the community to check for
///
/// \param completion Completion handler with boolean which returns True if permission is granted else returns False
///
- (void)hasPermission:(AmityPermission)permission forCommunity:(NSString * _Nonnull)communityId completion:(void (^ _Nonnull)(BOOL))completion;
@end


/// Delegate for AmityClient instance. This delegate is used for
/// notifying various events or error from within the sdk.
SWIFT_PROTOCOL("_TtP8AmitySDK19AmityClientDelegate_")
@protocol AmityClientDelegate
/// Notifies about different asychronous error which can
/// occur within the sdk. These error can be
/// <ul>
///   <li>
///     when user is globally banned
///   </li>
///   <li>
///     when user has bad session or authentication etc.
///   </li>
/// </ul>
/// You can use the error message & error code and map it with
/// <code>AmityErrorCode</code> to know the type of the error.
/// \param error Error instance received from sdk
///
- (void)didReceiveErrorWithError:(NSError * _Nonnull)error;
/// Notifies when connection status changes in sdk.
/// \param status enum AmityConnectionStatus which defines different state of connection
///
- (void)didChangeConnectionStatusWithStatus:(enum AmityConnectionStatus)status SWIFT_DEPRECATED_MSG("This function will be removed in the future.");
@end


SWIFT_PROTOCOL("_TtP8AmitySDK24AmityClientErrorDelegate_") SWIFT_DEPRECATED_MSG("This protocol will be removed in the future. Please use `AmityClientDelegate` instead.")
@protocol AmityClientErrorDelegate <NSObject>
- (void)didReceiveAsyncError:(NSError * _Nonnull)error;
@end

@class AmityMentioneesBuilder;

/// Class for editing comment objects
SWIFT_CLASS("_TtC8AmitySDK18AmityCommentEditor")
@interface AmityCommentEditor : NSObject
/// Valid <code>AmityClient</code> instance used to initialize this class
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Comment Id being edited
@property (nonatomic, readonly, copy) NSString * _Nonnull commentId;
/// Initializes editor class
/// \param client valid <code>AmityClient</code> instance
///
/// \param commentId Id of the comment to edit
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client commentId:(NSString * _Nonnull)commentId OBJC_DESIGNATED_INITIALIZER;
/// Edits text of the comment
/// \param text New text for this comment
///
/// \param completion Block to be executed after request is completed.
///
- (void)editText:(NSString * _Nonnull)text completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Edits text of the comment.
/// Use this method if you also want to edit the metadata associated
/// with mentions in the comment.
/// \param text New text for this comment
///
/// \param metadata Metadata for the comment. This can contain information about mentions
///
/// \param mentionees MentioneesBuilder class for this comment
///
/// \param completion Block to be executed when request is completed.
///
- (void)editText:(NSString * _Nonnull)text metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nullable)mentionees completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for handling flag, unflag and isFlaggedByMe operation. Instance of this class should be held strongly.
SWIFT_CLASS("_TtC8AmitySDK19AmityCommentFlagger")
@interface AmityCommentFlagger : NSObject
/// Initializes comment flagger class.
/// \param client Valid AmityClient instance
///
/// \param commentId Id of the comment to flag.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client commentId:(NSString * _Nonnull)commentId OBJC_DESIGNATED_INITIALIZER;
/// Flags comment with given id.
/// \param completion Block to be executed after request is completed. It provides success status and error if any.
///
- (void)flagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags comment with given id.
/// \param completion Block to be executed after request is completed. It provides success status and error if any.
///
- (void)unflagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether this comment is flagged by currently logged in user or not
/// \param completion Completion block to be called after request is completed. Returns true if comment is flagged by you else provides false.
///
- (void)isFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides interface related to comment. You can create, delete, query comments and reaction using this Repository class.
SWIFT_CLASS("_TtC8AmitySDK22AmityCommentRepository")
@interface AmityCommentRepository : NSObject
/// Valid instance of <code>AmityClient</code>
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Initializes this repository class.
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Deletes the comment
/// If the object is hard deleted, all the references pointing to the object will be invalidated. You can check this via  <code>object.isInvalidated</code>
/// An attempt to access the invalidated object will result in crash. If your app keep the reference to hard deleted objects, please make sure you check against object validity.
/// \param commentId Id of the comment to delete
///
/// \param hardDelete If this flag is true, the SDK will delete comment from the database, instead of setting <code>isDeleted</code> flag.
///
/// \param completion A block executed when the request has completed.
///
- (void)deleteCommentWithId:(NSString * _Nonnull)commentId hardDelete:(BOOL)hardDelete completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityComment;
@class AmityReaction;

@interface AmityCommentRepository (SWIFT_EXTENSION(AmitySDK))
/// Creates a new comment. Comments are created locally and then synced with server.
/// You can observe the <code>syncState</code> property of <code>AmityComment</code> to determine if server sync was successful or not.
/// \param referenceId Id of the post or content that you want to create comment for
///
/// \param type ReferenceType for comment. It can be either post or content.
///
/// \param parentId Id of the parent comment. Provide this id, if you want to create a reply to a comment.
///
/// \param text Comment Text
///
///
/// returns:
/// Returns AmityObject of <code>AmityComment</code> object.
- (AmityObject<AmityComment *> * _Nonnull)createCommentForReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)type parentId:(NSString * _Nullable)parentId text:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Creates a new comment. Comments are created locally and then synced with server.
/// You can observe the <code>syncState</code> property of <code>AmityComment</code> to determine if server sync was successful or not.
/// \param referenceId Id of the post or content that you want to create comment for
///
/// \param type ReferenceType for comment. It can be either .post or .content. Use <code>.content</code> only if you are creating comment for some external post.
///
/// \param parentId Id of the parent comment. Provide this id, if you want to create a reply to a comment.
///
/// \param text Comment Text
///
/// \param metadata The metadata for the comment, it can contain information about mentions
///
/// \param mentionees The mentiones in the comment
///
///
/// returns:
/// Returns AmityObject of <code>AmityComment</code> object.
- (AmityObject<AmityComment *> * _Nonnull)createCommentForReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)type parentId:(NSString * _Nullable)parentId text:(NSString * _Nonnull)text metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees SWIFT_WARN_UNUSED_RESULT;
/// Returns single latest comment for given referenceId
/// \param referenceId The id of the post/content that you want to fetch latest comment
///
/// \param referenceType Reference type for this comment. Use .content as reference type if you are querying comments for external content else use .post
///
/// \param includeReplies Whether to include comment replies in latest comment or not. Set it to true If you want to fetch only latest parent comment.
///
///
/// returns:
/// AmityObject for <code>AmityComment</code> object
- (AmityObject<AmityComment *> * _Nonnull)getLatestCommentWithReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)referenceType includeReplies:(BOOL)includeReplies SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of comments for particular post/content.
/// You can also fetch comment thread. i.e all the comments under particular comment.
/// To do that set <code>filterByParentId</code> to true and pass the parent comment id in <code>parentId</code>.
/// If <code>filterByParentId</code> is true but no <code>parentId</code> is present,then the collection will return all comments without a parent.
/// remark:
/// When <code>orderBy</code> is set to<code>.ascending</code>, we will fetch the first (oldest) comments in chronological order: ABC first, then the next page etc.
/// <code>.descending</code>, we will fetch the last (newest) comments in reverse-chronological order: ZYX first, then the previous page etc.
/// It’s up to the developer to call the right <code>loadNext</code>/<code>loadPrevious</code> page in the returned collection based on the <code>orderBy</code> value:
/// note:
/// when asking for more comments, based on the orderBy preference, you’ll need to ask for the next page (if the order is <code>.ascending</code>)
/// or the previous page (if the reverse is <code>.descending</code>)
/// \param referenceId The id of the post/content that you want to fetch comment for.
///
/// \param type The reference type for this comment. Use .content as reference type if you are querying comments for external content else use .post.
///
/// \param filterByParentId Set this to true if you want to fetch comment thread
///
/// \param parentId The id of the parent comment.
///
/// \param orderOption Whether we’d like the collection in chronological order or not.
///
/// \param includeDeletedComments Boolean whether this collection should fetch comments along with deleted comments
///
///
/// returns:
/// The comments live collection.
- (AmityCollection<AmityComment *> * _Nonnull)getCommentsWithReferenceId:(NSString * _Nonnull)referenceId referenceType:(AmityCommentReferenceType)type filterByParentId:(BOOL)filterByParentId parentId:(NSString * _Nullable)parentId orderBy:(AmityOrderBy)orderOption includeDeleted:(BOOL)includeDeletedComments SWIFT_WARN_UNUSED_RESULT;
/// Get all of the reactions on the specific comment.
/// \param commentId Id of particular comment
///
///
/// returns:
/// The <code>AmityReaction</code> live collection.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)commentId SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for subscription topic. Use one of the topics from below when subscribing to topic:
/// <code>AmityCommunityTopic</code>,<code>AmityPostTopic</code>,<code>AmityCommentTopic</code>,<code>AmityUserTopic</code>,<code>AmityFollowTopic</code>
SWIFT_PROTOCOL("_TtP8AmitySDK10AmityTopic_")
@protocol AmityTopic <NSObject>
/// Returns subscription topic
/// \param client Valid <code>AmityClient</code> instance
///
///
/// returns:
/// String of subscription topic
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
@end


/// Topic to subscribe to events related to comment. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK17AmityCommentTopic")
@interface AmityCommentTopic : NSObject <AmityTopic>
/// Initilize instance of this class
/// \param comment comment that will observe event
///
/// \param event event that will be observed
///
- (nonnull instancetype)initWithComment:(AmityComment * _Nonnull)comment andEvent:(AmityCommentEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AmityCommunityPostSettings : NSInteger;

@interface AmityCommunity (SWIFT_EXTENSION(AmitySDK))
@property (nonatomic, readonly) enum AmityCommunityPostSettings postSettings;
@end


/// Builder protocol for Community
SWIFT_PROTOCOL("_TtP8AmitySDK21AmityCommunityBuilder_")
@protocol AmityCommunityBuilder <AmityBuilder>
@end


/// Base Builder class which provides interface to create or update channel. Use specific builder class such as <code>AmityCommunityChannelBuilder</code>, <code>AmityLiveChannelBuilder</code>, <code>AmityConversationChannelBuilder</code> to create channel.
SWIFT_CLASS("_TtC8AmitySDK26AmityDefaultChannelBuilder")
@interface AmityDefaultChannelBuilder : NSObject <AmityChannelBuilderProtocol>
@property (nonatomic) AmityChannelType channelType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets display name for channel. Default value is nil
/// \param displayName Name to display for channel
///
- (void)setDisplayName:(NSString * _Nonnull)displayName;
/// Sets metadata for the channel. Default is [:]
/// \param metadata Extra metadata for this channel
///
- (void)setMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
/// Sets tags for channel.
/// \param tags Array of tags for this channel
///
- (void)setTags:(NSArray<NSString *> * _Nonnull)tags;
/// Sets user ids who are the member of this channel
/// \param userIds Id of memebrs for this channel
///
- (void)setUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Sets avatar for this channel. Use <code>AmityFileRepository</code> to upload image
/// and use the AmityImageData instance that you get as response here.
/// \param avatarData Avatar data for this channel.
///
- (void)setAvatar:(AmityImageData * _Nonnull)avatarData;
/// Internal build method. Do not use this directly.
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end


/// Builder class which provides interface to create channel of type community.
SWIFT_CLASS("_TtC8AmitySDK28AmityCommunityChannelBuilder")
@interface AmityCommunityChannelBuilder : AmityDefaultChannelBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets id for the channel. Default value is nil
/// \param channelId Id for the channel
///
- (void)setId:(NSString * _Nonnull)channelId;
@end


/// Data Builder class for community
SWIFT_CLASS("_TtC8AmitySDK25AmityCommunityDataBuilder")
@interface AmityCommunityDataBuilder : NSObject <AmityCommunityBuilder>
/// Sets display name for this community.
/// \param displayName Display name of the community
///
- (void)setDisplayName:(NSString * _Nonnull)displayName;
/// Sets description of the community
/// \param communityDescription Details about community.
///
- (void)setCommunityDescription:(NSString * _Nonnull)communityDescription;
/// Sets whether this community is public or private.
/// \param isPublic Boolean to indicate whether community is public or private
///
- (void)setIsPublic:(BOOL)isPublic;
/// Sets additional metadata for this community.
/// \param metadata Dictionary with key : value pairs
///
- (void)setMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata;
/// Sets category ids for this community. This links the categories to which
/// this community belongs.
/// \param categoryIds Id’s of community categories in string.
///
- (void)setCategoryIds:(NSArray<NSString *> * _Nonnull)categoryIds;
- (void)isPostReviewEnabled:(BOOL)isPostReviewEnabled SWIFT_DEPRECATED_MSG("Use `func setPostSettings(:)` instead.");
- (void)setPostSettings:(enum AmityCommunityPostSettings)postSettings;
/// Internal build method. Do not use this directly.
/// User do not have to set each method. But we still need to send
/// certain properties for creating community. So we build json structure
/// at the end.
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data Builder class for creating community.
SWIFT_CLASS("_TtC8AmitySDK33AmityCommunityCreationDataBuilder")
@interface AmityCommunityCreationDataBuilder : AmityCommunityDataBuilder
/// Sets userIds for this community
/// \param userIds Id of the user who will belong to this community.
///
- (void)setUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Sets avatar data for this community. Please use <code>AmityFileRepository</code> to
/// upload avatar
/// \param image <code>AmityImageData</code> obtained after uploading image using file repository.
///
- (void)setAvatar:(AmityImageData * _Nonnull)image;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Class providing interface for moderating community such as banning members, adding roles etc.
SWIFT_CLASS("_TtC8AmitySDK24AmityCommunityModeration")
@interface AmityCommunityModeration : NSObject
/// The client used to create the instance
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// The community Id associated with the instance
@property (nonatomic, readonly, copy) NSString * _Nonnull communityId;
/// Designated intializer.
/// \param client A valid client instance.
///
/// \param communityId The Id of the channel to update.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andCommunity:(NSString * _Nonnull)communityId OBJC_DESIGNATED_INITIALIZER;
/// Ban members
/// \param userIds An array of userIds
///
/// \param completion A block executed when this request is complete.
///
- (void)banMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unban members
/// \param userIds An array of userIds
///
/// \param completion A block executed when this request is complete.
///
- (void)unbanMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Assigns roles to users.
/// \param roles Roles to be assigned
///
/// \param userIds Id of users to whom this roles is to be assigned
///
/// \param completion A block executed when this request is complete.
///
- (void)addRoles:(NSArray<NSString *> * _Nonnull)roles userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (void)addRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use addRoles method instead");
/// Removes roles assigned to users.
/// \param roles Roles to be removed
///
/// \param userIds Array of user ids from which this roles is to be removed
///
/// \param completion A block executed when this request is complete.
///
- (void)removeRoles:(NSArray<NSString *> * _Nonnull)roles userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (void)removeRole:(NSString * _Nonnull)role userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use removeRoles method instead");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityRoleFilter;

/// Class representing each notification event. This class helps to define events for which you want to receive notifications in a community.
SWIFT_CLASS("_TtC8AmitySDK31AmityCommunityNotificationEvent")
@interface AmityCommunityNotificationEvent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly) AmityCommunityNotificationEventType eventType;
@property (nonatomic, readonly) BOOL isNetworkEnabled;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly, strong) AmityRoleFilter * _Nullable roleFilter;
/// Initializes community event for push notification settings
/// \param eventType Type of event
///
/// \param isEnabled Whether notification should be enabled or not
///
/// \param roleFilter An optional filter for determining which user role that the user would like to receive notification from.
///
- (nonnull instancetype)initWithEventType:(AmityCommunityNotificationEventType)eventType isEnabled:(BOOL)isEnabled roleFilter:(AmityRoleFilter * _Nullable)roleFilter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Instance of current notification settings for community.
SWIFT_CLASS("_TtC8AmitySDK34AmityCommunityNotificationSettings")
@interface AmityCommunityNotificationSettings : NSObject
/// If notifications is enabled for this community
@property (nonatomic, readonly) BOOL isEnabled;
/// If user enabled notification for this community
@property (nonatomic, readonly) BOOL isUserEnabled;
/// The array of event in the community
@property (nonatomic, readonly, copy) NSArray<AmityCommunityNotificationEvent *> * _Nonnull events;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for managing notifications related to community.
SWIFT_CLASS("_TtC8AmitySDK34AmityCommunityNotificationsManager")
@interface AmityCommunityNotificationsManager : NSObject
/// Initializes notification manager instance
/// \param client Valid <code>AmityClient</code> instance
///
/// \param communityId Id of the community
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client communityId:(NSString * _Nonnull)communityId OBJC_DESIGNATED_INITIALIZER;
/// Enable community level push notification settings.
/// note:
/// This setting will take effect on particular community only.
/// \param events Array of event
///
/// \param completion Completion block to be executed.
///
- (void)enableFor:(NSArray<AmityCommunityNotificationEvent *> * _Nullable)events completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Disables community level push notification settings
/// \param completion Block to be executed when the request is completed.
///
- (void)disableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Retrieves community level push notification settings. This settings is for particular community.
/// \param completion Block to be executed when request is completed. This block returns<code>AmityCommunityNotificationSettings</code> instance.
///
- (void)getSettingsWithCompletion:(void (^ _Nullable)(AmityCommunityNotificationSettings * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityCommunityMember;

/// Class providing interface for managing participants of community such as adding members, removing members, querying members etc.
SWIFT_CLASS("_TtC8AmitySDK27AmityCommunityParticipation")
@interface AmityCommunityParticipation : NSObject
/// The client used to create the instance
@property (nonatomic, strong) AmityClient * _Nonnull client;
/// The channel Id associated with the instance
@property (nonatomic, copy) NSString * _Nonnull communityId;
/// Designated intializer
/// \param client A valid client instance
///
/// \param communityId The Id of the channel to update
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client andCommunityId:(NSString * _Nonnull)communityId OBJC_DESIGNATED_INITIALIZER;
/// Adds users to the community
/// \param userIds An array of users Ids to add
///
/// \param completion A block executed when the request has completed
///
- (void)addMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes users from the channel
/// \param userIds An array of users Ids to remove
///
/// \param completion A block executed when the request has completed
///
- (void)removeMembers:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Get membership information for particular user
/// \param userId The id of the user
///
///
/// returns:
/// Returns AmityCommunityMembership object
- (AmityCommunityMember * _Nullable)getMemberWithId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Get membership information for this community
/// \param membershipOptions Option to filter channel members
///
/// \param roles List of roles to filter. If you don’t want to filter by roles, set it empty array.
///
/// \param sortBy Sort option for member list
///
///
/// returns:
/// Live Collection of <code>AmityCommunityMember</code> object
- (AmityCollection<AmityCommunityMember *> * _Nonnull)getMembersWithMembershipOptions:(AmityCommunityMembershipFilterOption)membershipOptions roles:(NSArray<NSString *> * _Nonnull)roles sortBy:(AmityCommunityMembershipSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AmityCommunityPostSettings, open) {
  AmityCommunityPostSettingsOnlyAdminCanPost = 0,
  AmityCommunityPostSettingsAdminReviewPostRequired = 1,
  AmityCommunityPostSettingsAnyoneCanPost = 2,
};


/// Repository class for community providing interface for create, update, delete, join, and leave community.
SWIFT_CLASS("_TtC8AmitySDK24AmityCommunityRepository")
@interface AmityCommunityRepository : NSObject
/// Valid <code>AmityClient</code> instance
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Initializes AmityCommunity Repository
/// \param client Valid <code>AmityClient</code> instance.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Creates a new community.
/// \param builder Builder class for specifying various community properties. Use <code>AmityCommunityCreationDataBuilder</code> class for creating community.
///
/// \param completion Block called when community is created.
///
- (void)createCommunityWith:(id <AmityCommunityBuilder> _Nonnull)builder completion:(void (^ _Nonnull)(AmityCommunity * _Nullable, NSError * _Nullable))completion;
/// Updates community.
/// \param id Id of the community to update.
///
/// \param builder Builder class for specifying various community properties. Use <code>AmityCommunityUpdateDataBuilder</code> class for updating community.
///
/// \param completion Block called when community is updated.
///
- (void)updateCommunityWithId:(NSString * _Nonnull)id builder:(id <AmityCommunityBuilder> _Nonnull)builder completion:(void (^ _Nonnull)(AmityCommunity * _Nullable, NSError * _Nullable))completion;
/// Delete community with provided id
/// \param communityId Id of the community to delete
///
/// \param completion Block called after community is deleted.
///
- (void)deleteCommunityWithId:(NSString * _Nonnull)communityId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Join particular community & become member of that community.
/// \param communityId Id of the community to join
///
/// \param completion Block called after request completion
///
- (void)joinCommunityWithId:(NSString * _Nonnull)communityId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Leave community. Leaving a community changes membership status to none.
/// \param communityId Id of the community to leave
///
/// \param completion Block called after request completion
///
- (void)leaveCommunityWithId:(NSString * _Nonnull)communityId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityCommunityCategory;

@interface AmityCommunityRepository (SWIFT_EXTENSION(AmitySDK))
/// Returns community level push notification manager
/// \param communityId Id of the community
///
///
/// returns:
/// Instance of <code>AmityCommunityNotificationsManager</code> object
- (AmityCommunityNotificationsManager * _Nonnull)notificationManagerForCommunityId:(NSString * _Nonnull)communityId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves community for particular community id
/// \param communityId Id of the community
///
///
/// returns:
/// LiveObject of that community
- (AmityObject<AmityCommunity *> * _Nonnull)getCommunityWithId:(NSString * _Nonnull)communityId SWIFT_WARN_UNUSED_RESULT;
/// Get collection of communities
/// \param displayName Display name of community to search. Set it nil if you want to fetch all communities
///
/// \param filter Filter communities based on user membership
///
/// \param sortBy Sort fetched communities
///
/// \param categoryId Communities belonging to particular category. This is optional.
///
/// \param includeDeletedCommunities Should include deleted communities in the collection or not
///
///
/// returns:
/// Live Collection of <code>AmityCommunity</code> object.
- (AmityCollection<AmityCommunity *> * _Nonnull)getCommunitiesWithDisplayName:(NSString * _Nullable)displayName filter:(AmityCommunityQueryFilter)filter sortBy:(AmityCommunitySortOption)sortBy categoryId:(NSString * _Nullable)categoryId includeDeleted:(BOOL)includeDeletedCommunities SWIFT_WARN_UNUSED_RESULT;
/// Returns collection of trending communities
///
/// returns:
/// AmityCollection of <code>AmityCommunity</code> object.
- (AmityCollection<AmityCommunity *> * _Nonnull)getTrendingCommunities SWIFT_WARN_UNUSED_RESULT;
/// Returns collection of recommended communities
///
/// returns:
/// AmityCollection of <code>AmityCommunity</code> object
- (AmityCollection<AmityCommunity *> * _Nonnull)getRecommendedCommunities SWIFT_WARN_UNUSED_RESULT;
/// Fetches all community categories
/// \param sortBy Option to sort categories.
///
/// \param includeDeletedCategories If deleted categories should be included in list or not
///
///
/// returns:
/// AmityCollection of <code>AmityCommunityCategory</code> object.
- (AmityCollection<AmityCommunityCategory *> * _Nonnull)getCategoriesWithSortBy:(AmityCommunityCategoriesSortOption)sortBy includeDeleted:(BOOL)includeDeletedCategories SWIFT_WARN_UNUSED_RESULT;
/// Search for members in community.
/// \param communityId Id of the community to search for
///
/// \param displayName Display name of member to match.
///
/// \param membershipOptions User membership status in community to search for.
///
/// \param roles List of roles to filter. If you don’t want to filter by roles, set it empty array.
///
/// \param sortBy Sort list of members
///
///
/// returns:
/// LiveCollection of <code>AmityCommunityMember</code> list which matches above search criteria.
- (AmityCollection<AmityCommunityMember *> * _Nonnull)searchMembersWithCommunityId:(NSString * _Nonnull)communityId displayName:(NSString * _Nonnull)displayName membership:(AmityCommunityMembershipFilterOption)membershipOptions roles:(NSArray<NSString *> * _Nonnull)roles sortBy:(AmityCommunityMembershipSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
@end


/// Topic to subscribe to events related to communities. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK19AmityCommunityTopic")
@interface AmityCommunityTopic : NSObject <AmityTopic>
/// Initilize instance of this class
/// \param community community that will observe event
///
/// \param event event that will be observed
///
- (nonnull instancetype)initWithCommunity:(AmityCommunity * _Nonnull)community andEvent:(AmityCommunityEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Data Builder class for updating community
SWIFT_CLASS("_TtC8AmitySDK31AmityCommunityUpdateDataBuilder")
@interface AmityCommunityUpdateDataBuilder : AmityCommunityDataBuilder
/// Sets avatar data for this community. Please use <code>AmityFileRepository</code> to
/// upload avatar
/// \param image <code>AmityImageData</code> obtained after uploading image using file repository. If you want to remote existing avatar, pass nil value.
///
- (void)setAvatar:(AmityImageData * _Nullable)image;
- (void)setIsPublic:(BOOL)isPublic;
- (void)isPostReviewEnabled:(BOOL)isPostReviewEnabled SWIFT_DEPRECATED_MSG("Use `func setPostSettings(:)` instead.");
- (void)setPostSettings:(enum AmityCommunityPostSettings)postSettings;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Connection status of sdk.
typedef SWIFT_ENUM(NSInteger, AmityConnectionStatus, open) {
  AmityConnectionStatusNotConnected = 0,
  AmityConnectionStatusDisconnected = 1,
  AmityConnectionStatusConnecting = 2,
  AmityConnectionStatusConnected = 3,
};


/// Builder class which provides interface to create channel of type conversation.
SWIFT_CLASS("_TtC8AmitySDK31AmityConversationChannelBuilder")
@interface AmityConversationChannelBuilder : AmityDefaultChannelBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets single user id for this channel.
- (void)setUserId:(NSString * _Nonnull)userId;
/// If this conversation is distinct or not. Default value is true.
/// note:
///
/// If a channel is distinct, it means creating a conversation channel
/// with same userId would result in same channel instead of creating a
/// new one.
/// \param isDistinct Set true if distinct else set false
///
- (void)setIsDistinct:(BOOL)isDistinct;
/// Internal method. Do not use directly
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
@end



/// Class for configuring endpoints for AmitySDK.
SWIFT_CLASS("_TtC8AmitySDK13AmityEndpoint")
@interface AmityEndpoint : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable httpUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable rpcUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable mqttUrl;
/// Initializes network endpoint with provided url parameters. If any url parameter is nil,
/// it uses default value of Global Region configuration.
/// \param httpUrl Valid http host url
///
/// \param rpcUrl Valid websocket host url
///
/// \param mqttUrl Valid mqtt host address without scheme i.e “broker.emqx.io”
///
- (nonnull instancetype)initWithHttpUrl:(NSString * _Nullable)httpUrl rpcUrl:(NSString * _Nullable)rpcUrl mqttHost:(NSString * _Nullable)mqttHost OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityPostRepository;
@protocol AmityPostBuilder;
@class AmityPost;

/// Repository class which provides interface for querying various types of feed.
SWIFT_CLASS("_TtC8AmitySDK19AmityFeedRepository")
@interface AmityFeedRepository : NSObject
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
@property (nonatomic, readonly, strong) AmityPostRepository * _Nonnull postRepository;
/// Initializer for Feed Repository
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
- (void)createPost:(id <AmityPostBuilder> _Nonnull)builder targetId:(NSString * _Nullable)targetId targetType:(AmityPostTargetType)targetType completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)updatePostWithPostId:(NSString * _Nonnull)postId builder:(id <AmityPostBuilder> _Nonnull)builder completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)deletePostWithPostId:(NSString * _Nonnull)postId parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)approvePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (void)declinePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AmityFeedRepository (SWIFT_EXTENSION(AmitySDK))
- (AmityObject<AmityPost *> * _Nonnull)getPostForPostId:(NSString * _Nonnull)postId SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)postId reactionName:(NSString * _Nullable)reactionName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use equivalent API in AmityPostRepository instead.");
/// Gets list of posts for own feed
/// \param sortBy Sort option for posts
///
/// \param includeDeletedPosts Whether to include deleted posts in list or not
///
///
/// returns:
/// Live collection for <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getMyFeedSortedBy:(AmityPostQuerySortOption)sortBy includeDeleted:(BOOL)includeDeletedPosts SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from user feed
/// \param userId Id of the user to fetch posts for
///
/// \param sortBy Sort option for posts
///
/// \param includeDeletedPosts Whether to include deleted posts in list or not
///
///
/// returns:
/// Live Collection of <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getUserFeed:(NSString * _Nonnull)userId sortBy:(AmityPostQuerySortOption)sortBy includeDeleted:(BOOL)includeDeletedPosts SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from global feed.
///
/// returns:
/// Live Collection of <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getGlobalFeed SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from global feed which are ranked with custom algorithm.
///
/// returns:
/// Live collection of <code>AmityPost</code> object
- (AmityCollection<AmityPost *> * _Nonnull)getCustomPostRankingGlobalfeed SWIFT_WARN_UNUSED_RESULT;
/// Gets list of posts from community feed.
/// \param communityId Id of the community
///
/// \param sortBy Sort option for posts.
///
/// \param includeDeletedPosts Whether to include deleted posts in list or not
///
/// \param feedType Type of feed.
///
///
/// returns:
/// Live collection of <code>AmityPost</code> object.
- (AmityCollection<AmityPost *> * _Nonnull)getCommunityFeedWithCommunityId:(NSString * _Nonnull)communityId sortBy:(AmityPostQuerySortOption)sortBy includeDeleted:(BOOL)includeDeletedPosts feedType:(AmityFeedType)feedType SWIFT_WARN_UNUSED_RESULT;
@end


/// Class containing information about uploaded files. This class is not meant to be subclassed and
/// its instance is not made to be created by user. Please use the instance of this class returned by sdk.
SWIFT_CLASS("_TtC8AmitySDK13AmityFileData")
@interface AmityFileData : NSObject
/// Id of the file
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// URL of the file. This url can be used for downloading file.
@property (nonatomic, copy) NSString * _Nonnull fileURL;
/// Additional attributes attached with this file
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Initializes file data from server response.
- (nonnull instancetype)initWithResponse:(NSDictionary<NSString *, id> * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Initializes file data.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder protocol for Post
SWIFT_PROTOCOL("_TtP8AmitySDK16AmityPostBuilder_")
@protocol AmityPostBuilder <AmityBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
@end


/// Builder class which provides interface to create post of type <code>file</code>.
SWIFT_CLASS("_TtC8AmitySDK20AmityFilePostBuilder")
@interface AmityFilePostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class NSURL;
@class AmityUploadableFile;
@class AmityVideoData;
@class NSData;

/// Class for performing file upload/download related actions in sdk. It provides various convenient methods for uploading images, files, videos as well as downloading them. All upload/download operation happens asynchronously.
SWIFT_CLASS("_TtC8AmitySDK19AmityFileRepository")
@interface AmityFileRepository : NSObject
/// Initalizes FileRepository class
/// \param client Valid AmityClient instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Asynchronously uploads an image to server. This method also allows you to track the progress of the upload.
/// This method is not suitable for uploading image of large size. We recommend using URL based <code>uploadImage(withURL:_)</code> method for uploading image of any size.
/// \param image UIImage to be uploaded
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded image data is returned else error is returned.
///
- (void)uploadImage:(UIImage * _Nonnull)image progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityImageData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously Uploads an image to server. This method also allows you to track the progress of the upload.
/// SDK generates multiple (small, medium & large) versions of images based on <code>isFullImage</code> parameter.
/// \param url URL of the image to upload. This URL should be from local file system.
///
/// \param isFullImage If this image is the large sized image. If this parameter is true, server generates images of multiple size.
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded image data is returned else error is returned.
///
- (void)uploadImageWith:(NSURL * _Nonnull)url isFullImage:(BOOL)isFullImage progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityImageData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously uploads a file to server. This method also allows you to track the progress of the upload.
/// This method is not suitable for uploading file of large size. We recommend using URL based <code>uploadFile(with url:_)</code> method for uploading files of any size.
/// \param file A file to be uploaded.
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded file data is returned else error is returned.
///
- (void)uploadFile:(AmityUploadableFile * _Nonnull)file progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityFileData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously uploads a file to server. This method also allows you to track the progress of the upload.
/// \param url URL of the file in local file system to be uploaded
///
/// \param fileName Name for the file to be uploaded. If file name is not specified, it is automatically determined from the URL.
///
/// \param progress Progress block called during upload process. This block can be called mulltiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload was successful, then uploaded file data is returned else error is returned.
///
- (void)uploadFileWith:(NSURL * _Nonnull)url fileName:(NSString * _Nullable)fileName progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityFileData * _Nullable, NSError * _Nullable))completion;
/// Asynchronously uploads video file to server.
/// \param url URL of the video from file system to be uploaded
///
/// \param progress Progress block called during upload process. This block can be called multiple time and the value of progress range from 0.0 - 1.0
///
/// \param completion Completion block called once the upload operation is finished. If upload is successful, the uploaded video data is returned else error is returned.
///
- (void)uploadVideoWith:(NSURL * _Nonnull)url progress:(void (^ _Nullable)(double))progress completion:(void (^ _Nonnull)(AmityVideoData * _Nullable, NSError * _Nullable))completion;
/// Downloads image asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// Image downloaded using AmityFileRepository are not cached by SDK. This method is not suitable for downloading image of large size. We recommend using URL based <code>downloadImage(fromURL: _)</code> method.
/// \param url The URL of the image to be downloaded.
///
/// \param size The size in which image is to be downloaded.
///
/// \param completion Completion block called once download operation is complete. If download was successful, then UIImage is returned else error is returned.
///
- (void)downloadImageAsDataFromURL:(NSString * _Nonnull)url size:(AmityMediaSize)size completion:(void (^ _Nonnull)(UIImage * _Nullable, AmityMediaSize, NSError * _Nullable))completion;
/// Downloads image asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// This method downloads the image data and writes it to a file in <code>Caches</code> directory in file system. If the download is success, this URL of the downloaded file will be returned. Incase of error, an error object will be returned through completion handler. It is upto the user to consume the file directly from the location provided or move it to any other appropriate location.
/// \code
/// let image = UIImage(contentsOfFile: <downloadedURL>.path)
///
/// \endcodenote:
/// Image downloaded using AmityFileRepository are not cached by SDK. User should maintain their own cache system.
/// \param url The URL for the image to be downloaded
///
/// \param size The size in which image is to be downloaded.
///
/// \param completion Completion block called once download operation is complete. If download was successful, then URL is returned else error is returned.
///
- (void)downloadImageFromURL:(NSString * _Nonnull)url size:(AmityMediaSize)size completion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
/// Downloads file asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// This method is not suitable for downloading file of large size. We recommend using URL based <code>downloadFile(fromURL: _)</code> method.
/// note:
/// Files downloaded using AmityFileRepository are not cached by SDK. User should maintain their own cache system.
/// \param url URL of the file to be downloaded
///
/// \param completion Returns the downloaded file if success. Else returns error
///
- (void)downloadFileAsDataFromURL:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completion;
/// Downloads file asynchronously from the file server. Once the download is complete, user is notified through completion handler in main thread.
/// Files are downloaded directly to file system in <code>Caches</code> directory. If the download is success, this URL of the downloaded file will be returned. Incase of error, an error object will be returned through completion handler. It is upto the user to consume the file directly from the location provided or move it to any other appropriate location.
/// note:
/// Files downloaded using AmityFileRepository are not cached by SDK. User should maintain their own cache system.
/// \param url URL of the file to be downloaded
///
/// \param completion Block to be executed after download operation is complete. Returns URL of the downloaded file in case of success else returns error
///
- (void)downloadFileFromURL:(NSString * _Nonnull)url completion:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completion;
/// Notifies user about progress of particular upload.
/// Sometimes you would want to observe the progress of particular upload. Example: you are sending an image message and want to show progress indicator for image. This method lets you track the progress of the upload.
/// \param uploadId Identifier for particular upload. Example: For message this can be messageId. Refer to documentation for more details
///
/// \param progress Returns progress value ranging from 0.0 - 1.0. This handler can get called multiple times.
///
- (void)getUploadProgressForUploadId:(NSString * _Nonnull)id progress:(void (^ _Nonnull)(double))progress;
/// Cancels the download of file.
/// \param url URL of the file being downloaded
///
- (void)cancelFileDownload:(NSString * _Nonnull)url;
/// Cancels download of images from file service
/// \param url URL of the image being downloaded
///
/// \param size Size of image
///
- (void)cancelImageDownload:(NSString * _Nonnull)url size:(AmityMediaSize)size;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Response for follow / unfollow / accept / decline action.
SWIFT_CLASS("_TtC8AmitySDK19AmityFollowResponse")
@interface AmityFollowResponse : NSObject
/// User who initiated the request
@property (nonatomic, readonly, copy) NSString * _Nonnull sourceUserId;
/// User to whom this request is initiated.
@property (nonatomic, readonly, copy) NSString * _Nonnull targetUserId;
/// Follow status between source & target user.
@property (nonatomic) AmityFollowStatus status;
- (AmityFollowStatus)statusFromStringWithStr:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Topic to subscribe to events related to user. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK16AmityFollowTopic")
@interface AmityFollowTopic : NSObject <AmityTopic>
- (nonnull instancetype)initWithEvent:(AmityFollowEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class containing information about uploaded image. This class is not meant to be subclassed and
/// its instance is not made to be created by user. Please use the instance of this class returned by sdk.
SWIFT_CLASS("_TtC8AmitySDK14AmityImageData")
@interface AmityImageData : NSObject
/// Id of the image file uploaded
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// Url of the image file uploaded. This url can be used for downloading file.
@property (nonatomic, copy) NSString * _Nonnull fileURL;
/// Additional attributes for this image such as its size etc.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Additional metadata associated with this image.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull metadata;
/// Initializes image data from server response.
- (nonnull instancetype)initWithResponse:(NSDictionary<NSString *, id> * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Initializes file data
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder class which provides interface to create post of type <code>image</code>.
SWIFT_CLASS("_TtC8AmitySDK21AmityImagePostBuilder")
@interface AmityImagePostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder class which provides interface to create channel of type <code>live</code>.
SWIFT_CLASS("_TtC8AmitySDK23AmityLiveChannelBuilder")
@interface AmityLiveChannelBuilder : AmityDefaultChannelBuilder
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets id for the channel. Default value is nil
/// \param channelId Id for the channel
///
- (void)setId:(NSString * _Nonnull)channelId;
@end


/// Builder class which provides interface to create post of type <code>liveStream</code>.
SWIFT_CLASS("_TtC8AmitySDK26AmityLiveStreamPostBuilder")
@interface AmityLiveStreamPostBuilder : NSObject <AmityPostBuilder>
- (nonnull instancetype)initWithStreamId:(NSString * _Nonnull)streamId text:(NSString * _Nullable)text OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides data of RTMP url.
/// The standard full url format can be found at <code>url</code> property.
/// For custom RTMP url formatting, please look into other properties in this class.
SWIFT_CLASS("_TtC8AmitySDK22AmityLiveStreamURLInfo")
@interface AmityLiveStreamURLInfo : NSObject
/// The full RTMP url, that most RTMP players support.
@property (nonatomic, copy) NSURL * _Nonnull url;
/// The origin in the url.
@property (nonatomic, copy) NSString * _Nonnull origin;
/// The app name in the url.
@property (nonatomic, copy) NSString * _Nonnull appName;
/// The stream name in the url.
@property (nonatomic, copy) NSString * _Nonnull streamName;
/// The query parameters in the url.
@property (nonatomic, copy) NSString * _Nonnull query;
+ (AmityLiveStreamURLInfo * _Nonnull)makeFromWatcherUrlInfo:(NSDictionary<NSString *, id> * _Nonnull)rtmpInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum AmityLiveVideoRecordingFileFormat : NSInteger;

/// Instance of live video recording data.
SWIFT_CLASS("_TtC8AmitySDK27AmityLiveVideoRecordingData")
@interface AmityLiveVideoRecordingData : NSObject
- (nonnull instancetype)initWithValue:(NSDictionary<NSString *, id> * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
/// Returns video recording url.
/// \param format File format of the video recording that you want the url for.
///
///
/// returns:
/// URL of the video recording for given file format.
- (NSURL * _Nullable)urlFor:(enum AmityLiveVideoRecordingFileFormat)format SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// LiveVideoRecording file format
typedef SWIFT_ENUM(NSInteger, AmityLiveVideoRecordingFileFormat, open) {
  AmityLiveVideoRecordingFileFormatMP4 = 0,
  AmityLiveVideoRecordingFileFormatFLV = 1,
  AmityLiveVideoRecordingFileFormatM3U8 = 2,
};

enum AmityLogLevel : NSInteger;

/// Console Logger class used in sdk. This class is used internally in sdk to log various sdk information. These information can be valuable during development or intergration of sdk.
/// Users can view necessary logs by setting <code>logLevel</code> to appropriate value. By default, sdk prints
/// warning logs.
SWIFT_CLASS("_TtC8AmitySDK8AmityLog")
@interface AmityLog : NSObject
/// Sets log level. All logs gets printed on xcode console. By default, log level is .warn
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum AmityLogLevel logLevel;)
+ (enum AmityLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum AmityLogLevel)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This enum specifies different levels of logging for sdk. Log Level can be set as <code>AmityLog.logLevel = .warn</code>.
typedef SWIFT_ENUM(NSInteger, AmityLogLevel, open) {
/// Debugging logs.
  AmityLogLevelDebug = 0,
/// Warning logs
  AmityLogLevelWarn = 1,
/// Error logs
  AmityLogLevelError = 2,
/// All types of logs
  AmityLogLevelAll = 3,
/// Don’t show any kinds of logs
  AmityLogLevelNone = 4,
};


/// This class represents information about mention type, position of the mention, length of the mention and userId if type is not channel.
SWIFT_CLASS("_TtC8AmitySDK12AmityMention")
@interface AmityMention : NSObject
/// The type of mention. Type can be user or channel
@property (nonatomic, readonly) AmityMessageMentionType type;
/// The index of mention started from “@” character.
@property (nonatomic) NSInteger index;
/// The length of the mention started from “@” character
@property (nonatomic, readonly) NSInteger length;
/// The userId who was mentioned in the message. There is no need to provide userId If type is channel
@property (nonatomic, readonly, copy) NSString * _Nullable userId;
/// Creates new instance of AmityMention
/// \param type Type of mention
///
/// \param index index of mention started from “@” character
///
/// \param length length of mention started from “@” character
///
/// \param userId The userId who was mentioned in the message. There is no need to provide userId If type is channel
///
- (nonnull instancetype)initWithType:(AmityMessageMentionType)type index:(NSInteger)index length:(NSInteger)length userId:(NSString * _Nullable)userId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AmityMentionMapper is a helper class, which helps:
/// <ul>
///   <li>
///     to convert mentions from metadata if metadata contains information about mentions,
///   </li>
///   <li>
///     to convert metadata from array of AmityMention objects.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8AmitySDK18AmityMentionMapper")
@interface AmityMentionMapper : NSObject
/// Converts the metadata into the array of AmityMention if metadata contains information about mentions.
/// \param metadata The metadata which supposed to contains information about mentions.
///
///
/// returns:
/// Array of AmityMention if metadata contains information about mentions.
+ (NSArray<AmityMention *> * _Nonnull)mentionsFromMetadata:(NSDictionary<NSString *, id> * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
/// Converts the array of mentions into metadata.
/// \param mentions The array of AmityMention.
///
///
/// returns:
/// Dictionary which contains the array of AmityMention
+ (NSDictionary<NSString *, id> * _Nonnull)metadataFrom:(NSArray<AmityMention *> * _Nonnull)mentions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents information about mention type and array of userIds if type is not channel.
SWIFT_CLASS("_TtC8AmitySDK15AmityMentionees")
@interface AmityMentionees : NSObject
@property (nonatomic, readonly) AmityMessageMentionType type;
@property (nonatomic, readonly, copy) NSArray<AmityUser *> * _Nullable users;
- (nonnull instancetype)initWithType:(AmityMessageMentionType)type andUsers:(NSArray<AmityUser *> * _Nullable)users OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AmityMentioneesBuilder which builds the mentionees payload.
SWIFT_CLASS("_TtC8AmitySDK22AmityMentioneesBuilder")
@interface AmityMentioneesBuilder : NSObject
/// Mention channel to be able to notify everyone
- (void)mentionChannel;
/// Mention users who must be notified
/// \param userIds the array of mentioned userIds
///
- (void)mentionUsersWithUserIds:(NSArray<NSString *> * _Nonnull)userIds;
/// Builds the dictionary for mentionees
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class provides interface for editing messages.
SWIFT_CLASS("_TtC8AmitySDK18AmityMessageEditor")
@interface AmityMessageEditor : NSObject
/// Initializes Message Editor class.
/// \param client Valid <code>AmityClient</code> instance
///
/// \param messageId Id of the message to edit.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client messageId:(NSString * _Nonnull)messageId OBJC_DESIGNATED_INITIALIZER;
/// Edits the text message
/// \param text Text to be edited
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)editText:(NSString * _Nonnull)text completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Edits the text message
/// \param text Text to be edited
///
/// \param metadata Metadata for the message. It can contain information about mentions
///
/// \param mentionees Mentionees Builder class
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)editText:(NSString * _Nonnull)text metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nullable)mentionees completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Edits custom message
/// \param customMessage Updated custom message
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)editCustomMessage:(NSDictionary<NSString *, id> * _Nonnull)customMessage completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Sets tag for the message. As long as the user is a member of a channel, that user can set the tags
/// to any messages of that channel.
/// \param tags Array of tags to be set.
///
/// \param completion Completion block to be executed after request is completed.
///
- (void)setTags:(NSArray<NSString *> * _Nullable)tags completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides interface for flagging / unflagging message. Instance of this class should be held strongly.
SWIFT_CLASS("_TtC8AmitySDK19AmityMessageFlagger")
@interface AmityMessageFlagger : NSObject
/// Initializes Message Flagger class.
/// \param client Valid <code>AmityClient</code> instance
///
/// \param messageId Id of the message to flag.
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client messageId:(NSString * _Nonnull)messageId OBJC_DESIGNATED_INITIALIZER;
/// Flags the message. This is reported to the admin panel for the moderators to see.
/// \param completion Completion block to be executed when request is completed.
///
- (void)flagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags the message
/// \param completion Completion block to be executed when request is completed.
///
- (void)unflagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether the message is already flagged or not.
/// \param completion Completion block to be executed when request is completed.
///
- (void)isFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityMessage;

/// This class provides interface related to message. You can create, delete & query message using this Repository class.
SWIFT_CLASS("_TtC8AmitySDK22AmityMessageRepository")
@interface AmityMessageRepository : NSObject
/// Valid <code>AmityClient</code> instance used to initialize this repo.
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
/// Initializes MessageRepository class
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Deletes message with provided id. Deleted AmityMessage would have isDeleted set to true.
/// \param messageId Id of the message to delete
///
/// \param completion A block executed when the request is completed.
///
- (void)deleteMessageWithId:(NSString * _Nonnull)messageId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes all failed messages.
/// \param completion Block to be executed when request is completed.
///
- (void)deleteFailedMessages:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes single failed message.
/// \param messageId Id of the message to delete.
///
/// \param completion Block to be executed when request is completed.
///
- (void)deleteFailedMessage:(NSString * _Nonnull)messageId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Creates a custom message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// The data of the message should support JSONSerialization.
/// \param channelId Id of the channel to create message in
///
/// \param data Custom Data for this message. This data is serialized using JSONSerialization. All dictionary keys should be NStrings and Values can be String, Number, Array, Dictionary or NSNull. Failing to do so would result in exception.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createCustomMessageWithChannelId:(NSString * _Nonnull)channelId data:(NSDictionary<NSString *, id> * _Nonnull)data tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a new text message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// \param channelId Id of the channel to create message.
///
/// \param text The text message to be sent.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createTextMessageWithChannelId:(NSString * _Nonnull)channelId text:(NSString * _Nonnull)text tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a new text message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// \param channelId Id of the channel to create message.
///
/// \param text The text message to be sent.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param metadata The metadata for the message. It can contain information about mentions.
///
/// \param mentionees Builder class for creating mentionees.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createTextMessageWithChannelId:(NSString * _Nonnull)channelId text:(NSString * _Nonnull)text tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a new text message.
/// Messages are locally created first and then synced with the server. When you call this method, it returns immediately with the id
/// of the locally created message. Once message is successfuly created in the server, completion block will be executed.
/// \param channelId Id of the channel to create message.
///
/// \param imageFile URL for the image in local file system
///
/// \param caption Any caption for this image
///
/// \param fullImage Whether or not this image should be sent at full resolution. If <code>fullImage</code> is set to true, server automatically generates multiple size of the same images which can be downloaded later using <code>AmityFileRepository</code>. Else only one size of image will be available.
///
/// \param tags An arary of tags for this message
///
/// \param parentId Parent Id of this message. If you want to create a reply to certain message, use its id as <code>parentId</code>. This cannot be changed later.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createImageMessageWithChannelId:(NSString * _Nonnull)channelId imageFile:(NSURL * _Nonnull)imageURL caption:(NSString * _Nullable)caption fullImage:(BOOL)fullImage tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates audio message.
/// \param channelId Id of the channel to create message.
///
/// \param audioFileURL URL for the audio file in local file system.
///
/// \param fileName Name for this audio file. If a file name is provided that would be used else sdk would try to determine the file name based on url last path component.
///
/// \param parentId Id of the parent message. If this message is a “reply-to” for some other message, you can provide id of that message.
///
/// \param tags Array of tags for this message.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created.
- (NSString * _Nonnull)createAudioMessageWithChannelId:(NSString * _Nonnull)channelId audioFile:(NSURL * _Nonnull)audioFileURL fileName:(NSString * _Nullable)fileName parentId:(NSString * _Nullable)parentId tags:(NSArray<NSString *> * _Nullable)tags completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates a file message
/// \param channelId Id of the channel to create message.
///
/// \param fileURL URL for the file from local file system.
///
/// \param filename Name for this file. If a file name is provided that would be used else sdk would try to determine the file name based on url last path component.
///
/// \param caption Caption for uploaded file.
///
/// \param tags Array of tags for this message.
///
/// \param parentId Id of the parent message. If this message is a “reply-to” for some other message, you can provide id of that message.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created
- (NSString * _Nonnull)createFileMessageWithChannelId:(NSString * _Nonnull)channelId file:(NSURL * _Nonnull)fileURL filename:(NSString * _Nullable)filename caption:(NSString * _Nullable)caption tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Create a video message
/// \param channelId Id of the channel to create message.
///
/// \param videoURL URL for the video from local file system.
///
/// \param filename Name for this video. If a file name is provided that would be used else sdk would try to determine the file name based on url last path component.
///
/// \param caption Caption for uploaded video.
///
/// \param tags Array of tags for this message.
///
/// \param parentId Id of the parent message. If this message is a “reply-to” for some other message, you can provide id of that message.
///
/// \param completion Block to be executed after request is completed.
///
///
/// returns:
/// Id of the message created
- (NSString * _Nonnull)createVideoMessageWithChannelId:(NSString * _Nonnull)channelId videoFile:(NSURL * _Nonnull)videoURL filename:(NSString * _Nullable)filename caption:(NSString * _Nullable)caption tags:(NSArray<NSString *> * _Nullable)tags parentId:(NSString * _Nullable)parentId completion:(void (^ _Nullable)(AmityMessage * _Nullable, NSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Returns existing message for provided id
/// \param messageId Valid message id
///
///
/// returns:
/// Live Object for <code>AmityMessage</code> object.
- (AmityObject<AmityMessage *> * _Nullable)getMessage:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a collection of all messages filtered by the given <code>channelId</code>, <code>tags</code>, and <code>parentId</code>.
/// When observing changes on the collection, the only time AmityCollectionChange gives back a deletion update (on messages) is
/// when the user has been banned or has left the channel: to confirm this, you can also observe changes in the AmityChannel
/// object(if this also gets deleted, you have either left the channel or you’ve been banned).
/// Let’s say that a channel has the messages (in chronological order):
/// ABC…XYZ
/// When <code>reverse</code> is set to:
/// <ul>
///   <li>
///     <code>false</code>, we will fetch the first (oldest)
///     messages in chronological order: ABC first, then the next page etc.
///   </li>
///   <li>
///     <code>true</code>, we will fetch the last (newest) messages
///     in reverse-chronological order: ZYX first, then the previous page etc.
///   </li>
/// </ul>
/// It’s up to the developer to call the right <code>loadNext</code>/<code>loadPrevious</code> page in
/// the returned collection based on the <code>reverse</code> value:
/// <ul>
///   <li>
///     <code>loadNext</code> loads newer messages in comparison with the last loaded page
///   </li>
///   <li>
///     <code>loadPrevious</code> loads older messages in comparison with the last loaded page
///   </li>
/// </ul>
/// when asking for more messages, based on the reverse preference, you’ll need to ask for the next page (if the reverse is <code>false</code>) or the previous page (if the reverse is <code>true</code>).
/// A message is matched when it contains ANY tag listed in includingTags, and contains NONE of the tags listed in excludingTags.
/// \param channelId Id of the channel to fetch messages
///
/// \param includingTags Array of tags that message should contain. Pass empty array if you do not want to filter messages.
///
/// \param excludingTags Array of tags that message should not contain. Pass empty array if you do not want to filter messages.
///
/// \param filterByParentId Whether messages should be filtered by parent id or not. If true, <code>parentId</code> should be provided.
///
/// \param parentId <code>messageId</code> of the message of the parent whose childs we are interested in
///
/// \param reverse Whether we’d like the collection in chronological order or not.
///
///
/// returns:
/// <code>AmityCollection</code> of <code>AmityMessage</code>.
- (AmityCollection<AmityMessage *> * _Nonnull)getMessagesWithChannelId:(NSString * _Nonnull)channelId includingTags:(NSArray<NSString *> * _Nonnull)includingTags excludingTags:(NSArray<NSString *> * _Nonnull)excludingTags filterByParentId:(BOOL)filterByParentId parentId:(NSString * _Nullable)parentId reverse:(BOOL)reverse SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Please use queryMessages(options: AmityMessageQueryOptions) instead");
/// Get all reactions for specific message
/// \param messageId Id of the message
///
///
/// returns:
/// The <code>AmityReaction</code> live collection.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)messageId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Token which ties to the life cycle of AmityObject or AmityCollection. As long as this token is retained, live object or live collection can be observed. Do not initialize this instance directly. Instead use the token returned from <code>observe</code> or <code>observeOnce</code> method from <code>AmityObject</code> or <code>AmityCollection</code>.
SWIFT_CLASS("_TtC8AmitySDK22AmityNotificationToken")
@interface AmityNotificationToken : NSObject
/// Indicates validity status for this token. Do not use this directly.
/// Use <code>invalidate()</code> method to invalidate a token
@property (nonatomic, readonly) BOOL invalid;
/// Indicates notification validity for this token. Do not use this directly.
@property (nonatomic) BOOL notifyOnce;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This doesn’t have to be a live collection
- (nonnull instancetype)initWithLiveCollection:(NSObject * _Nonnull)liveCollection OBJC_DESIGNATED_INITIALIZER;
/// This doesn’t have to be a live object
- (nonnull instancetype)initWithLiveObject:(NSObject * _Nonnull)liveObject OBJC_DESIGNATED_INITIALIZER;
- (void)invalidate;
@end


/// Builder protocol for Poll
SWIFT_PROTOCOL("_TtP8AmitySDK16AmityPollBuilder_")
@protocol AmityPollBuilder <AmityBuilder>
@end


/// Builder class which provides interface to create <code>poll</code> which can be used in post.
SWIFT_CLASS("_TtC8AmitySDK24AmityPollCreationBuilder")
@interface AmityPollCreationBuilder : NSObject <AmityPollBuilder>
/// Represents the json representation of the poll
///
/// returns:
/// json repsentation for poll
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Builder class which provides interface to create post of type <code>poll</code>.
SWIFT_CLASS("_TtC8AmitySDK20AmityPollPostBuilder")
@interface AmityPollPostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Repository provides access to feed and collections of feeds
SWIFT_CLASS("_TtC8AmitySDK19AmityPollRepository")
@interface AmityPollRepository : NSObject
/// Designated intializer
/// \param client A valid context instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Create a poll
/// \param builder A type of AmityPollBuilder object.
///
- (void)createPoll:(id <AmityPollBuilder> _Nonnull)builder completion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion;
/// Close the specific poll with poll id
/// \param pollId A poll id represent the poll object
///
- (void)closePollWithId:(NSString * _Nonnull)pollId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Vote the specific poll with poll id
/// \param pollId A poll id represent the poll object
///
/// \param answerIds Array of answerIds
///
- (void)votePollWithId:(NSString * _Nonnull)pollId answerIds:(NSArray<NSString *> * _Nonnull)answerIds completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum AmityVideoDataQuality : NSInteger;

@interface AmityPost (SWIFT_EXTENSION(AmitySDK))
- (AmityVideoData * _Nullable)getVideoInfoForQuality:(enum AmityVideoDataQuality)quality SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This function will be removed in the future. Please use `getVideoInfo()` instead.");
- (NSDictionary<NSNumber *, AmityVideoData *> * _Nonnull)getVideosInfo SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This function will be removed in the future. Please use `getVideoInfo()` instead.");
@end



/// This class provides interface for flagging / unflagging post. Instance of this class should be held strongly.
SWIFT_CLASS("_TtC8AmitySDK16AmityPostFlagger")
@interface AmityPostFlagger : NSObject
/// Initializes Post Flagger class
/// \param client Valid <code>AmityClient</code> instance
///
/// \param postId Id of the post to flag
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client postId:(NSString * _Nonnull)postId OBJC_DESIGNATED_INITIALIZER;
/// Flags the post
/// \param completion Completion Block called after request is executed
///
- (void)flagPostWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags the post
/// \param completion Completion block called after request is executed
///
- (void)unflagPostWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether this particular post is flagged by you or not. If its not flagged, the completion handler
/// is executed immediately else async request is made to return your flag status.
/// \param completion Completion block called after request is executed.
///
- (void)isPostFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class represents post query options.
SWIFT_CLASS("_TtC8AmitySDK21AmityPostQueryOptions")
@interface AmityPostQueryOptions : NSObject
/// The target type.
@property (nonatomic, readonly) AmityPostTargetType targetType;
/// The target id.
@property (nonatomic, readonly, copy) NSString * _Nonnull targetId;
/// The collection ordering.
@property (nonatomic, readonly) AmityPostQuerySortOption sortBy;
/// The <code>post.isDeleted</code> type to query.
@property (nonatomic, readonly) AmityQueryOption deletedOption;
/// Filter only specific <code>post.dataType</code>, specify <code>nil</code>to query all post types.
@property (nonatomic, readonly, copy) NSSet<NSString *> * _Nullable filterPostTypes;
/// Create AmityPostQueryOptions instance.
/// \param targetType The target type.
///
/// \param targetId The target id.
///
/// \param sortBy The collection ordering.
///
/// \param deletedOption The <code>post.isDeleted</code> type to query.
///
/// \param filterPostTypes Filter only specific <code>post.dataType</code>, specify <code>nil</code>to query all post types.
///
- (nonnull instancetype)initWithTargetType:(AmityPostTargetType)targetType targetId:(NSString * _Nonnull)targetId sortBy:(AmityPostQuerySortOption)sortBy deletedOption:(AmityQueryOption)deletedOption filterPostTypes:(NSSet<NSString *> * _Nullable)filterPostTypes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Repository class which contains interface for creating, updating, deleting, accepting, declining post.
SWIFT_CLASS("_TtC8AmitySDK19AmityPostRepository")
@interface AmityPostRepository : NSObject
/// Initializes AmityPostRepository class.
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Creates a post.
/// \param builder Class for building post. There are various types of post builder. Use appropriate builder class for the type of post you want to create. Example: Use <code>AmityTextPostBuilder</code> to create text post.
///
/// \param targetId Id of the target where you want this post to be created. It can be userId or communityId. Set nil if you are creating a post on your own feed.
///
/// \param targetType Target type for the post.
///
/// \param completion Completion block to be called after post is created.
///
- (void)createPost:(id <AmityPostBuilder> _Nonnull)builder targetId:(NSString * _Nullable)targetId targetType:(AmityPostTargetType)targetType completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Creates a post with mentions.
/// \param builder Class for building post. There are various types of post builder. Use appropriate builder class for the type of post you want to create. Example: Use <code>AmityTextPostBuilder</code> to create text post.
///
/// \param targetId Id of the target where you want this post to be created. It can be userId or communityId. Set nil if you are creating a post on your own feed.
///
/// \param targetType Target type for the post.
///
/// \param metadata The metadata for the post, it can contain information about mentions
///
/// \param mentionees Use MentioneesBuilder class to provide mention related information
///
/// \param completion Completion block to be called after post is created.
///
- (void)createPost:(id <AmityPostBuilder> _Nonnull)builder targetId:(NSString * _Nullable)targetId targetType:(AmityPostTargetType)targetType metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Updates post with provided data
/// \param postId Id of the post to update
///
/// \param builder Class for building post. <em>Note</em> Builder should be of same type that you used to create the original post.
///
/// \param completion Completion block to be called after post is updated.
///
- (void)updatePostWithPostId:(NSString * _Nonnull)postId builder:(id <AmityPostBuilder> _Nonnull)builder completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Updates post with provided data which contains mentions.
/// \param postId Id of the post to update
///
/// \param builder Class for building post. <em>Note</em> Builder should be of same type that you used to create the original post.
///
/// \param metadata The metadata for the post. It can contain information about mentions
///
/// \param mentionees Use MentioneesBuilder class to provide mention related information
///
/// \param completion Completion block to be called after post is updated.
///
- (void)updatePostWithPostId:(NSString * _Nonnull)postId builder:(id <AmityPostBuilder> _Nonnull)builder metadata:(NSDictionary<NSString *, id> * _Nullable)metadata mentionees:(AmityMentioneesBuilder * _Nonnull)mentionees completion:(void (^ _Nullable)(AmityPost * _Nullable, NSError * _Nullable))completion;
/// Delete the post with provided id.
/// \param postId A post id represent the post object
///
/// \param parentId Id of the parent post. If a post has parent, then provide its id.
///
/// \param hardDelete If this flag is true, the SDK will delete comment from the database, instead of setting <code>isDeleted</code> flag.
/// Note: After the object is hard deleted, all the references point to the object will be invalidated. You can check this via @code object.isInvalidated @endcode
/// An attempt to access the invalidated object will result in crash. If your app keep the reference to hard deleted objects, please make sure you check against object validity
///
/// \param completion Completion block to be called after post is deleted.
///
- (void)deletePostWithPostId:(NSString * _Nonnull)postId parentId:(NSString * _Nullable)parentId hardDelete:(BOOL)hardDelete completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Approves post with provided id. To approve posts, you must have appropriate permission.
/// \param postId Id of the post to approve
///
/// \param completion Completion block to be called after post is approved
///
- (void)approvePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Declines post with provided id. To Decline post, you must have appropriate permission
/// \param postId Id of the post to decline
///
/// \param completion Completion block to be called after post is declined.
///
- (void)declinePostWithPostId:(NSString * _Nonnull)postId completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AmityPostRepository (SWIFT_EXTENSION(AmitySDK))
/// Retrives post for particular id
/// \param postId Id of the post
///
///
/// returns:
/// AmityObject instance for <code>AmityPost</code>.
- (AmityObject<AmityPost *> * _Nonnull)getPostForPostId:(NSString * _Nonnull)postId SWIFT_WARN_UNUSED_RESULT;
/// Retrieves list of posts for provided options
/// \param options Various options for query
///
///
/// returns:
/// AmityCollection of <code>AmityPost</code>. Observe the instance for results.
- (AmityCollection<AmityPost *> * _Nonnull)getPosts:(AmityPostQueryOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Retrieves reactions for particular post
/// \param postId Id of post
///
/// \param reactionName Name of the reaction
///
///
/// returns:
/// AmityCollection of <code>AmityReaction</code> objects.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)postId reactionName:(NSString * _Nullable)reactionName SWIFT_WARN_UNUSED_RESULT;
@end


/// Topic to subscribe to events related to post. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK14AmityPostTopic")
@interface AmityPostTopic : NSObject <AmityTopic>
- (nonnull instancetype)initWithPost:(AmityPost * _Nonnull)post andEvent:(AmityPostEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Repository class which provides interface for adding, removing, querying reactions added to message, post or comments.
SWIFT_CLASS("_TtC8AmitySDK23AmityReactionRepository")
@interface AmityReactionRepository : NSObject
/// Initialize this repository
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Get list of reactions for particular content.
/// \param referenceId Id of the post, comment or message
///
/// \param type If you are adding reaction to post, reference type would be of type .post (swift) or AmityReactionReferenceTypePost (Objc)
///
/// \param reactionName Name of the reaction. If reaction name is provided, it fetches all reactions which matches the reaction name. If reaction name is empty or nil, it fetches all reactions for particular content.
///
///
/// returns:
/// Live Collection of <code>AmityReaction</code> object.
- (AmityCollection<AmityReaction *> * _Nonnull)getReactions:(NSString * _Nonnull)referenceId referenceType:(AmityReactionReferenceType)type reactionName:(NSString * _Nullable)reactionName SWIFT_WARN_UNUSED_RESULT;
/// Add reaction to the content.
/// \param reaction Name of the reaction
///
/// \param contentId Id for the content. Example: postId for post, commentId for comment & so on.
///
/// \param type Type of content. If you are adding reaction to post, reference type would be of type .post (swift) or AmityReactionReferenceTypePost (Objc)
///
/// \param completion Closure to be executed after this operation is complete.
///
- (void)addReaction:(NSString * _Nonnull)reaction referenceId:(NSString * _Nonnull)contentId referenceType:(AmityReactionReferenceType)type completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes reaction from the content.
/// \param reaction Name of the reaction
///
/// \param contentId Id for the content. Example: postId for post, commentId for comment & so on.
///
/// \param type Type of content. If you are adding reaction to post, reference type would be of type .post (swift) or AmityReactionReferenceTypePost (Objc)
///
/// \param completion Closure to be executed after this operation is complete.
///
- (void)removeReaction:(NSString * _Nonnull)reaction referenceId:(NSString * _Nonnull)contentId referenceType:(AmityReactionReferenceType)type completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Regions this sdk can connect to during initialization. This can be used when initializing <code>AmityClient(_:)</code> instance
typedef SWIFT_ENUM(NSInteger, AmityRegion, open) {
/// Default region
  AmityRegionGlobal = 0,
/// Europe
  AmityRegionEU = 1,
/// Singapore
  AmityRegionSG = 2,
/// United States
  AmityRegionUS = 3,
};


SWIFT_CLASS("_TtC8AmitySDK21AmityRegionalEndpoint") SWIFT_DEPRECATED_MSG("This class will be removed in future. Please use `AmityClient(apiKey:_, region:_)` method with `AmityRegion` instead.")
@interface AmityRegionalEndpoint : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AmitySDK15AmityRoleFilter")
@interface AmityRoleFilter : NSObject
@property (nonatomic) AmityRoleFilterType filterType;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable roleIds;
/// Initializes AmityRoleFilter with AmityRoleFilterTypeOnly. A filter for receiving the particular user roles.
/// \param roleIds A set of role id the user would like to receive push notification from.
///
+ (AmityRoleFilter * _Nonnull)onlyFilterWithRoleIds:(NSArray<NSString *> * _Nonnull)roleIds SWIFT_WARN_UNUSED_RESULT;
/// Initializes EkoRoleFilter with AmityRoleFilterTypeNot. A filter for ignoring the particular user roles.
/// \param roleIds A set of role id the user would like to ignore push notification.
///
+ (AmityRoleFilter * _Nonnull)notFilterWithRoleIds:(NSArray<NSString *> * _Nonnull)roleIds SWIFT_WARN_UNUSED_RESULT;
/// Initializes AmityRoleFilter with AmityRoleFilterTypeAll. A filter for receiving any type of user roles.
+ (AmityRoleFilter * _Nonnull)allFilter SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The query predicate for “getStreamsCollection”.
SWIFT_CLASS("_TtC8AmitySDK26AmityStreamCollectionQuery")
@interface AmityStreamCollectionQuery : NSObject
/// Include status as part of stream collection querying.
- (void)includeStatus:(AmityStreamStatus)status;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AmityStream;

/// AmityStreamRepository class provides interfaces for dealing with live stream related objects. You can create a video stream, query list of streams, dispose stream using methods from this class.
/// note:
/// Do not subclass this class.
SWIFT_CLASS("_TtC8AmitySDK21AmityStreamRepository")
@interface AmityStreamRepository : NSObject
/// Designated intializer.
/// @param client A valid context instance.
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Create video stream
/// \param title Title of the live stream
///
/// \param description Optional description for the stream
///
/// \param thumbnailImage Thumbnail image to show for the stream.
///
/// \param meta Any additional metadata for the stream
///
/// \param completion The completion handler to be called when request is completed.
///
- (void)createVideoStreamWithTitle:(NSString * _Nonnull)title description:(NSString * _Nullable)description thumbnailImage:(AmityImageData * _Nullable)thumbnailImage meta:(NSDictionary<NSString *, id> * _Nullable)meta completion:(void (^ _Nonnull)(AmityStream * _Nullable, NSError * _Nullable))completion;
/// Ends live stream. It sends the request to update streaming status to “.ended”, and dispose streaming url.
/// \param streamId Id of the stream to dispose of
///
/// \param completion Completion handler to be called when request is complete.
///
- (void)disposeStreamWithId:(NSString * _Nonnull)streamId completion:(void (^ _Nonnull)(AmityStream * _Nullable, NSError * _Nullable))completion;
/// Get a live object of stream, by id.
/// \param streamId The unique identifer of stream
///
///
/// returns:
/// Live Object for <code>AmityStream</code> object
- (AmityObject<AmityStream *> * _Nonnull)getStreamById:(NSString * _Nonnull)streamId SWIFT_WARN_UNUSED_RESULT;
/// Get list of streams for provided query parameters
/// \param query Query Option for streams
///
///
/// returns:
/// Live Collection of <code>AmityStream</code> object
- (AmityCollection<AmityStream *> * _Nonnull)getStreamsCollectionFrom:(AmityStreamCollectionQuery * _Nonnull)query SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class which provides interface to create post of type <code>text</code>.
SWIFT_CLASS("_TtC8AmitySDK20AmityTextPostBuilder")
@interface AmityTextPostBuilder : NSObject <AmityPostBuilder>
/// Sets current text as provided text
/// \param text Text for the post
///
- (void)setText:(NSString * _Nonnull)text;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// This class provides interface to subscribe to real time event topics.
SWIFT_CLASS("_TtC8AmitySDK22AmityTopicSubscription")
@interface AmityTopicSubscription : NSObject
/// Initializes instance of this class
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Subscribes to particular topic.
/// \param topic Topic to subscribe. There are 4 topics that you can subscribe. <code>AmityUserTopic</code>,<code>AmityPostTopic</code>,<code>AmityCommunityTopic</code>,<code>AmityCommentTopic</code>. Each topic can contain one or more events that you can subscribe to. Please look into documentation of respective topic for more details.
///
/// \param completion Completion handler called when this action is successful or fails.
///
- (void)subscribeTopic:(id <AmityTopic> _Nonnull)topic withCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Unsubscribes from particular topic.
/// \param topic Topic to unsubscribe from.
///
/// \param completion Completion handler to be called when this action succeeds or fails.
///
- (void)unsubscribeTopic:(id <AmityTopic> _Nonnull)topic withCompletion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class to represent the file that is being uploaded.
SWIFT_CLASS("_TtC8AmitySDK19AmityUploadableFile")
@interface AmityUploadableFile : NSObject
/// Identifier which uniquely identifies this file.
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// Data representing actual File.
@property (nonatomic, copy) NSData * _Nonnull fileData;
/// Name of the file being uploaded. Example: my-awesome-file.pdf.
/// Extension will be automatically extracted from your File Name
@property (nonatomic, copy) NSString * _Nullable fileName;
/// MimeType of the file being uploaded. Default value is “application/octet-stream”
@property (nonatomic, copy) NSString * _Nonnull mimeType;
/// Any metadata associated with the file. Right now its ignored
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull metaData;
/// Initializes the instance for this class.
- (nonnull instancetype)initWithFileData:(NSData * _Nonnull)fileData fileName:(NSString * _Nullable)fileName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for handling flag, unflag and isFlaggedByMe operation. This class reference must be stored strongly until its operation is complete.
SWIFT_CLASS("_TtC8AmitySDK16AmityUserFlagger")
@interface AmityUserFlagger : NSObject
/// Initializes user flagger class
/// \param client Valid AmityClient instance
///
/// \param userId Id of the user that you want to flag
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client userId:(NSString * _Nonnull)userId OBJC_DESIGNATED_INITIALIZER;
/// Flags user with given id
/// \param completion Closure to be executed after request is completed.
///
- (void)flagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Unflags user with given id
/// \param completion Closure to be executed after request is completed
///
- (void)unflagWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Checks whether this user is flagged by currently logged in user or not
/// \param completion Completion block to be called after request is completed. Returns true if user is flagged by you else provides false.
///
- (void)isFlaggedByMeWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityMyFollowInfo;
@class AmityUserFollowInfo;

/// Class providing interfaces to follow, unfollow, accept, decline user requests etc.
SWIFT_CLASS("_TtC8AmitySDK22AmityUserFollowManager")
@interface AmityUserFollowManager : NSObject
/// Initializes this class.
/// \param client A valid context instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Create a follow request to the particular user
/// \param userId The id of user we are sending the request to.
///
/// \param completion A block executed when this request is complete.
///
- (void)followUserWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Cancel a pending request or unfollow the particular user
/// \param userId The id of user we want to unfollow or withdraw a pending request.
///
/// \param completion A block executed when this request is complete.
///
- (void)unfollowUserWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Accept an incoming request of a particular user
/// \param userId The id of user we want to accept a request.
///
/// \param completion A block executed when this request is complete.
///
- (void)acceptUserRequestWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Decline an incoming request of a particular user or remove the follower
/// \param userId The id of user we want decline a request.
///
/// \param completion A block executed when this request is complete.
///
- (void)declineUserRequestWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nullable)(BOOL, AmityFollowResponse * _Nullable, NSError * _Nullable))completion;
/// Get my follow information in order to see following count, follower count and pending count
/// \param completion Block executed when this request is complete.
///
- (void)getMyFollowInfoWithCompletion:(void (^ _Nonnull)(BOOL, AmityMyFollowInfo * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use getMyFollowInfo api which returns AmityObject<AmityMyFollowInfo> instead.");
/// Get particular user’s follow information in order to see following count, follower count and relation status
/// \param userId Id of the user
///
/// \param completion Block to be executed when request is complete.
///
- (void)getUserFollowInfoWithUserId:(NSString * _Nonnull)userId completion:(void (^ _Nonnull)(BOOL, AmityUserFollowInfo * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use getUserFollowInfo api which returns AmityObject<AmityUserFollowInfo> instead.");
/// Removes stale follow relationship data
- (void)clearAmityFollowRelationshipLocalData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AmityFollowRelationship;

@interface AmityUserFollowManager (SWIFT_EXTENSION(AmitySDK))
/// Fetches follow information such as following count, follower count and pending count & returns as Live Object.
///
/// returns:
/// Returns LiveObject for <code>AmityMyFollowInfo</code> object.
- (AmityObject<AmityMyFollowInfo *> * _Nonnull)getMyFollowInfo SWIFT_WARN_UNUSED_RESULT;
/// Fetches particular user’s follow information in order to see following count, follower count and relation status as Live Object.
/// \param userId Id of user
///
///
/// returns:
/// LiveObject for <code>AmityUserFollowInfo</code> object.
- (AmityObject<AmityUserFollowInfo *> * _Nonnull)getUserFollowInfoWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of relationships of users who follows you.
/// \param option Query options
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getMyFollowerListWith:(AmityFollowQueryOption)option SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of relationships whom you follow.
/// \param option Query Options.
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getMyFollowingListWith:(AmityFollowQueryOption)option SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of users who follows this user.
/// \param userId Id of the user whose relationship is to be fetched.
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object.
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getUserFollowerListWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Fetches collection of user relationships whom this user follows.
/// \param userId Id of the user whose relationship is to be fetched.
///
///
/// returns:
/// LiveCollection of <code>AmityFollowRelationship</code> object.
- (AmityCollection<AmityFollowRelationship *> * _Nonnull)getUserFollowingListWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
@end


/// Class responsible for configuring notification settings for user for particular module.
SWIFT_CLASS("_TtC8AmitySDK27AmityUserNotificationModule")
@interface AmityUserNotificationModule : NSObject
@property (nonatomic, readonly) AmityNotificationModuleType moduleType;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly, strong) AmityRoleFilter * _Nullable roleFilter;
/// Initializes module for push notification settings
/// \param moduleType Type of module
///
/// \param isEnabled Whether user would like to receive push notifications for particular module
///
/// \param roleFilter (optional) A filter for determining which user role that the user would like to receive notification from. If nil provided, skip updating roles.
///
- (nonnull instancetype)initWithModuleType:(AmityNotificationModuleType)moduleType isEnabled:(BOOL)isEnabled roleFilter:(AmityRoleFilter * _Nullable)roleFilter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Instance of current notification settings for user.
SWIFT_CLASS("_TtC8AmitySDK29AmityUserNotificationSettings")
@interface AmityUserNotificationSettings : NSObject
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly, copy) NSArray<AmityUserNotificationModule *> * _Nonnull modules;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class for managing notifications for user in different module.
SWIFT_CLASS("_TtC8AmitySDK29AmityUserNotificationsManager")
@interface AmityUserNotificationsManager : NSObject
/// Initialize notification manager instance
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Enable user level push notification settings.
/// note:
/// This setting will take effect on every device used by the user.
/// \param modules An array of modules that consists of <code>chat</code>, <code>social</code> and <code>video-streaming</code>.
///
/// \param completion A block executed when the request has completed
///
- (void)enableFor:(NSArray<AmityUserNotificationModule *> * _Nullable)modules completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Disable user level push notification settings.
/// note:
/// This setting will take effect on every device used by the user.
/// \param completion A block executed when the request has completed.
///
- (void)disableWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Retrieve the user level push notification settings.
/// note:
/// This setting is per user, not per device.
/// \param completion A block executed when the request has completed.
///
- (void)getSettingsWithCompletion:(void (^ _Nullable)(AmityUserNotificationSettings * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides interface related to user. You can query or search user using this Repository class.
SWIFT_CLASS("_TtC8AmitySDK19AmityUserRepository")
@interface AmityUserRepository : NSObject
@property (nonatomic, readonly, strong) AmityClient * _Nonnull client;
@property (nonatomic, readonly, strong) AmityUserFollowManager * _Nonnull followManager;
/// Initializer
/// \param client Valid <code>AmityClient</code> instance
///
- (nonnull instancetype)initWithClient:(AmityClient * _Nonnull)client OBJC_DESIGNATED_INITIALIZER;
/// Fetches <code>AmityUser</code> live object for provided id.
/// \param userId Id of the user
///
///
/// returns:
/// AmityObject of AmityUser
- (AmityObject<AmityUser *> * _Nonnull)getUser:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Search users based on display name
/// \param displayName The display name of the user we want to search
///
/// \param sortBy The sort option provided by <code>AmityUserSortOption</code>
///
///
/// returns:
/// Returns <code>AmityCollection</code> of all users which matches the search query
- (AmityCollection<AmityUser *> * _Nonnull)searchUser:(NSString * _Nonnull)displayName sortBy:(AmityUserSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
/// Returns all available users
/// \param sortBy The sort option provided by <code>AmityUserSortOption</code>
///
///
/// returns:
/// Returns <code>AmityCollection</code> of all users.
- (AmityCollection<AmityUser *> * _Nonnull)getUsers:(AmityUserSortOption)sortBy SWIFT_WARN_UNUSED_RESULT;
+ (void)setupRealTimeEventWithClient:(AmityClient * _Nonnull)client;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Topic to subscribe to events related to user. This topic can be used in <code>AmityTopicSubscription</code> class.
SWIFT_CLASS("_TtC8AmitySDK14AmityUserTopic")
@interface AmityUserTopic : NSObject <AmityTopic>
- (nonnull instancetype)initWithUser:(AmityUser * _Nonnull)user andEvent:(AmityUserEvent)event OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getSubscriptionTopic:(AmityClient * _Nonnull)client SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Builder class for updating current user information.
SWIFT_CLASS("_TtC8AmitySDK22AmityUserUpdateBuilder")
@interface AmityUserUpdateBuilder : NSObject
/// Set display name for current user
/// \param name Display name to set. If you want to remove assigned display name, pass param nil or empty.
///
- (void)setDisplayName:(NSString * _Nullable)name;
/// Sets description for current user
/// \param description Description for the user.
///
- (void)setUserDescription:(NSString * _Nonnull)description;
/// Sets metadata for current user
/// \param metadata Dictionary containing metadata
///
- (void)setUserMetadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Sets custom url as an avatar url. This is useful if you want to assign the existing
/// avatar url as an avatar url.
/// You can only use this either this method or <code>setAvatar</code> for updating avatar. If both method
/// are used, then this method will be given priority and <code>setAvatar</code> input will be
/// discarded.
/// \param customURL Custom URL of the avatar to be assigned. If you want to remove
/// assigned url, set this parameter to nil.
///
- (void)setAvatarCustomUrl:(NSString * _Nullable)customURL;
/// Sets avatar for this user. Image for this avatar should be uploaded first using
/// <code>AmityFileRepository</code> and the <code>AmityImageData</code> returned upon completion should
/// be set as a parameter.
/// You can only use this either this method or <code>setAvatarCustomUrl</code> for updating avatar. If both method
/// are used, then <code>setAvatarCustomUrl</code> will be given priority and input from this method will be
/// discarded.
/// \param avatar <code>AmityImageData</code> returned upon successful upload of image using
/// <code>AmityFileRepository</code>. If you want to remove avatar, set this parameter to nil.
///
- (void)setAvatar:(AmityImageData * _Nullable)avatar;
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class containing information about uploaded video. This class is not meant to be subclassed and
/// its instance is not made to be created by user. Please use the instance of this class returned by sdk.
SWIFT_CLASS("_TtC8AmitySDK14AmityVideoData")
@interface AmityVideoData : NSObject
/// Id of the video file
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// URL of the file. This url can be used for downloading file.
@property (nonatomic, copy) NSString * _Nonnull fileURL;
/// Additional attributes attached with this file
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// Initializes file data from server response.
- (nonnull instancetype)initWithResponse:(NSDictionary<NSString *, id> * _Nonnull)response OBJC_DESIGNATED_INITIALIZER;
/// Initializes file data.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (NSString * _Nonnull)getStringValue:(enum AmityVideoDataQuality)quality SWIFT_WARN_UNUSED_RESULT;
@end

/// Quality of uploaded AmityVideo
typedef SWIFT_ENUM(NSInteger, AmityVideoDataQuality, open) {
  AmityVideoDataQualityOriginal = 0,
  AmityVideoDataQualityHigh = 1,
  AmityVideoDataQualityMedium = 2,
  AmityVideoDataQualityLow = 3,
};


/// Builder class which provides interface to create post of type <code>video</code>.
SWIFT_CLASS("_TtC8AmitySDK21AmityVideoPostBuilder")
@interface AmityVideoPostBuilder : NSObject <AmityPostBuilder>
- (NSDictionary<NSString *, id> * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)buildForPostUpdate SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSDate;

@interface NSDateFormatter (SWIFT_EXTENSION(AmitySDK))
+ (NSDate * _Nullable)ekoDateFromISO8601String:(NSString * _Nullable)dateString SWIFT_WARN_UNUSED_RESULT;
@end






SWIFT_CLASS("_TtC8AmitySDK12EkoFileModel")
@interface EkoFileModel : EkoRealmModel
@property (nonatomic, copy) NSString * _Nonnull fileId;
@property (nonatomic, copy) NSString * _Nonnull fileUrl;
@property (nonatomic, copy) NSString * _Nonnull type;
@property (nonatomic, copy) NSData * _Nullable attributes;
@property (nonatomic, copy) NSString * _Nonnull feedType;
@property (nonatomic, copy) NSString * _Nonnull status;
@property (nonatomic, copy) NSData * _Nullable videoUrl;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary * _Nullable)defaultPropertyValues SWIFT_WARN_UNUSED_RESULT;
+ (nonnull instancetype)ekoCreateOrUpdateInRealm:(RLMRealm * _Nonnull)realm withJSON:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (AmityFileData * _Nonnull)mapToFileData SWIFT_WARN_UNUSED_RESULT;
- (AmityImageData * _Nonnull)mapToImageData SWIFT_WARN_UNUSED_RESULT;
- (AmityVideoData * _Nonnull)mapToVideoData SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)extractAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AmitySDK17EkoNetworkRequest")
@interface EkoNetworkRequest : NSObject
/// Initialize RPC Request.
/// \param endpoint Rpc Endpoint
///
/// \param params Request Parameters
///
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint params:(NSDictionary<NSString *, id> * _Nullable)params OBJC_DESIGNATED_INITIALIZER;
/// Initialize Http Request.
/// \param endpoint Http Endpoint
///
/// \param params Request Parameters
///
/// \param method Request Method
///
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint params:(NSDictionary<NSString *, id> * _Nullable)params method:(ASCHttpMethod)method OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface EkoNetworkRequest (SWIFT_EXTENSION(AmitySDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end










@interface NSKeyedUnarchiver (SWIFT_EXTENSION(AmitySDK))
+ (id _Nullable)ekoUnarchivedObjectFromData:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end







SWIFT_CLASS("_TtC8AmitySDK15ObserverManager")
@interface ObserverManager : NSObject
- (void)trackLiveCollection:(AmityCollection<id> * _Nonnull)liveCollection;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@protocol NSFastEnumeration;

@interface RLMRealm (SWIFT_EXTENSION(AmitySDK))
- (void)ekoTransactionWithBlock:(SWIFT_NOESCAPE void (^ _Nonnull)(void))block;
- (void)ekoHardDeleteObject:(EkoRealmModel * _Nonnull)object objectId:(NSString * _Nonnull)objectId objectType:(NSString * _Nonnull)objectType;
- (void)ekoHardDeleteObjects:(id <NSFastEnumeration> _Nonnull)objects objectIds:(NSArray<NSString *> * _Nonnull)objectIds objectType:(NSString * _Nonnull)objectType;
@end





#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
